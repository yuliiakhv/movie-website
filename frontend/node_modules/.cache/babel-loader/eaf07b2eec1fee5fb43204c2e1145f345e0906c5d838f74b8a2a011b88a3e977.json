{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar indexLegacy = require('./index-legacy-eb8b4696.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * @public\n */\nconst MotionConfigContext = React.createContext({\n  transformPagePoint: p => p,\n  isStatic: false,\n  reducedMotion: \"never\"\n});\nconst MotionContext = React.createContext({});\n\n/**\n * @public\n */\nconst PresenceContext = React.createContext(null);\nconst useIsomorphicLayoutEffect = indexLegacy.isBrowser ? React.useLayoutEffect : React.useEffect;\nconst LazyContext = React.createContext({\n  strict: false\n});\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n  const {\n    visualElement: parent\n  } = React.useContext(MotionContext);\n  const lazyContext = React.useContext(LazyContext);\n  const presenceContext = React.useContext(PresenceContext);\n  const reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n  const visualElementRef = React.useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState,\n      parent,\n      props,\n      presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig\n    });\n  }\n  const visualElement = visualElementRef.current;\n  React.useInsertionEffect(() => {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n  const canHandoff = React.useRef(Boolean(window.HandoffAppearAnimations));\n  useIsomorphicLayoutEffect(() => {\n    if (!visualElement) return;\n    visualElement.render();\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    if (canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  React.useEffect(() => {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n    if (!canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    /**\n     * Once we've handed off animations we can delete HandoffAppearAnimations\n     * so components added after the initial render can animate changes\n     * in useEffect vs useLayoutEffect.\n     */\n    window.HandoffAppearAnimations = undefined;\n    canHandoff.current = false;\n  });\n  return visualElement;\n}\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return React.useCallback(instance => {\n    instance && visualState.mount && visualState.mount(instance);\n    if (visualElement) {\n      instance ? visualElement.mount(instance) : visualElement.unmount();\n    }\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (indexLegacy.isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Only pass a new ref callback to React if we've received a visual element\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\n   * or other dependencies change.\n   */\n  [visualElement]);\n}\nfunction getCurrentTreeVariants(props, context) {\n  if (indexLegacy.isControllingVariants(props)) {\n    const {\n      initial,\n      animate\n    } = props;\n    return {\n      initial: initial === false || indexLegacy.isVariantLabel(initial) ? initial : undefined,\n      animate: indexLegacy.isVariantLabel(animate) ? animate : undefined\n    };\n  }\n  return props.inherit !== false ? context : {};\n}\nfunction useCreateMotionContext(props) {\n  const {\n    initial,\n    animate\n  } = getCurrentTreeVariants(props, React.useContext(MotionContext));\n  return React.useMemo(() => ({\n    initial,\n    animate\n  }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n  return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\nfunction loadFeatures(features) {\n  for (const key in features) {\n    indexLegacy.featureDefinitions[key] = {\n      ...indexLegacy.featureDefinitions[key],\n      ...features[key]\n    };\n  }\n}\nconst LayoutGroupContext = React.createContext({});\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = React.createContext({});\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({\n  preloadedFeatures,\n  createVisualElement,\n  useRender,\n  useVisualState,\n  Component\n}) {\n  preloadedFeatures && loadFeatures(preloadedFeatures);\n  function MotionComponent(props, externalRef) {\n    /**\n     * If we need to measure the element we load this functionality in a\n     * separate class component in order to gain access to getSnapshotBeforeUpdate.\n     */\n    let MeasureLayout;\n    const configAndProps = {\n      ...React.useContext(MotionConfigContext),\n      ...props,\n      layoutId: useLayoutId(props)\n    };\n    const {\n      isStatic\n    } = configAndProps;\n    const context = useCreateMotionContext(props);\n    const visualState = useVisualState(props, isStatic);\n    if (!isStatic && indexLegacy.isBrowser) {\n      /**\n       * Create a VisualElement for this component. A VisualElement provides a common\n       * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n       * providing a way of rendering to these APIs outside of the React render loop\n       * for more performant animations and interactions\n       */\n      context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n      /**\n       * Load Motion gesture and animation features. These are rendered as renderless\n       * components so each feature can optionally make use of React lifecycle methods.\n       */\n      const initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n      const isStrict = React.useContext(LazyContext).strict;\n      if (context.visualElement) {\n        MeasureLayout = context.visualElement.loadFeatures(\n        // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n        configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n      }\n    }\n    /**\n     * The mount order and hierarchy is specific to ensure our element ref\n     * is hydrated by the time features fire their effects.\n     */\n    return React__namespace.createElement(MotionContext.Provider, {\n      value: context\n    }, MeasureLayout && context.visualElement ? React__namespace.createElement(MeasureLayout, {\n      visualElement: context.visualElement,\n      ...configAndProps\n    }) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));\n  }\n  const ForwardRefComponent = React.forwardRef(MotionComponent);\n  ForwardRefComponent[motionComponentSymbol] = Component;\n  return ForwardRefComponent;\n}\nfunction useLayoutId({\n  layoutId\n}) {\n  const layoutGroupId = React.useContext(LayoutGroupContext).id;\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n  function custom(Component, customMotionComponentConfig = {}) {\n    return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n  }\n  if (typeof Proxy === \"undefined\") {\n    return custom;\n  }\n  /**\n   * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n   * Rather than generating them anew every render.\n   */\n  const componentCache = new Map();\n  return new Proxy(custom, {\n    /**\n     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n     * The prop name is passed through as `key` and we can use that to generate a `motion`\n     * DOM component with that name.\n     */\n    get: (_target, key) => {\n      /**\n       * If this element doesn't exist in the component cache, create it and cache.\n       */\n      if (!componentCache.has(key)) {\n        componentCache.set(key, custom(key));\n      }\n      return componentCache.get(key);\n    }\n  });\n}\n\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\"animate\", \"circle\", \"defs\", \"desc\", \"ellipse\", \"g\", \"image\", \"line\", \"filter\", \"marker\", \"mask\", \"metadata\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"rect\", \"stop\", \"switch\", \"symbol\", \"svg\", \"text\", \"tspan\", \"use\", \"view\"];\nfunction isSVGComponent(Component) {\n  if (\n  /**\n   * If it's not a string, it's a custom React component. Currently we only support\n   * HTML custom React components.\n   */\n  typeof Component !== \"string\" ||\n  /**\n   * If it contains a dash, the element is a custom HTML webcomponent.\n   */\n  Component.includes(\"-\")) {\n    return false;\n  } else if (\n  /**\n   * If it's in our list of lowercase SVG tags, it's an SVG component\n   */\n  lowercaseSVGElements.indexOf(Component) > -1 ||\n  /**\n   * If it contains a capital letter, it's an SVG component\n   */\n  /[A-Z]/.test(Component)) {\n    return true;\n  }\n  return false;\n}\nconst createHtmlRenderState = () => ({\n  style: {},\n  transform: {},\n  transformOrigin: {},\n  vars: {}\n});\nfunction copyRawValuesOnly(target, source, props) {\n  for (const key in source) {\n    if (!indexLegacy.isMotionValue(source[key]) && !indexLegacy.isForcedMotionValue(key, props)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction useInitialMotionValues({\n  transformTemplate\n}, visualState, isStatic) {\n  return React.useMemo(() => {\n    const state = createHtmlRenderState();\n    indexLegacy.buildHTMLStyles(state, visualState, {\n      enableHardwareAcceleration: !isStatic\n    }, transformTemplate);\n    return Object.assign({}, state.vars, state.style);\n  }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n  const styleProp = props.style || {};\n  const style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n  copyRawValuesOnly(style, styleProp, props);\n  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n  return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  const htmlProps = {};\n  const style = useStyle(props, visualState, isStatic);\n  if (props.drag && props.dragListener !== false) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false;\n    // Disable text selection\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n    // Disable scrolling on the draggable direction\n    style.touchAction = props.drag === true ? \"none\" : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n  }\n  if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n    htmlProps.tabIndex = 0;\n  }\n  htmlProps.style = style;\n  return htmlProps;\n}\n\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\"animate\", \"exit\", \"variants\", \"initial\", \"style\", \"values\", \"variants\", \"transition\", \"transformTemplate\", \"transformValues\", \"custom\", \"inherit\", \"onLayoutAnimationStart\", \"onLayoutAnimationComplete\", \"onLayoutMeasure\", \"onBeforeLayoutMeasure\", \"onAnimationStart\", \"onAnimationComplete\", \"onUpdate\", \"onDragStart\", \"onDrag\", \"onDragEnd\", \"onMeasureDragConstraints\", \"onDirectionLock\", \"onDragTransitionEnd\", \"_dragX\", \"_dragY\", \"onHoverStart\", \"onHoverEnd\", \"onViewportEnter\", \"onViewportLeave\", \"ignoreStrict\", \"viewport\"]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n  return key.startsWith(\"while\") || key.startsWith(\"drag\") && key !== \"draggable\" || key.startsWith(\"layout\") || key.startsWith(\"onTap\") || key.startsWith(\"onPan\") || validMotionProps.has(key);\n}\nlet shouldForward = key => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return;\n  // Explicitly filter our events\n  shouldForward = key => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n  /**\n   * We attempt to import this package but require won't be defined in esm environments, in that case\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n   * in favour of explicit injection.\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n  const filteredProps = {};\n  for (const key in props) {\n    /**\n     * values is considered a valid prop by Emotion, so if it's present\n     * this will be rendered out to the DOM unless explicitly filtered.\n     *\n     * We check the type as it could be used with the `feColorMatrix`\n     * element, which we support.\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) ||\n    // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\nconst createSvgRenderState = () => ({\n  ...createHtmlRenderState(),\n  attrs: {}\n});\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n  const visualProps = React.useMemo(() => {\n    const state = createSvgRenderState();\n    indexLegacy.buildSVGAttrs(state, visualState, {\n      enableHardwareAcceleration: false\n    }, indexLegacy.isSVGTag(Component), props.transformTemplate);\n    return {\n      ...state.attrs,\n      style: {\n        ...state.style\n      }\n    };\n  }, [visualState]);\n  if (props.style) {\n    const rawStyles = {};\n    copyRawValuesOnly(rawStyles, props.style, props);\n    visualProps.style = {\n      ...rawStyles,\n      ...visualProps.style\n    };\n  }\n  return visualProps;\n}\nfunction createUseRender(forwardMotionProps = false) {\n  const useRender = (Component, props, ref, {\n    latestValues\n  }, isStatic) => {\n    const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = {\n      ...filteredProps,\n      ...visualProps,\n      ref\n    };\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    const {\n      children\n    } = props;\n    const renderedChildren = React.useMemo(() => indexLegacy.isMotionValue(children) ? children.get() : children, [children]);\n    return React.createElement(Component, {\n      ...elementProps,\n      children: renderedChildren\n    });\n  };\n  return useRender;\n}\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n  const ref = React.useRef(null);\n  if (ref.current === null) {\n    ref.current = init();\n  }\n  return ref.current;\n}\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n  const unwrappedValue = indexLegacy.isMotionValue(value) ? value.get() : value;\n  return indexLegacy.isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\nfunction makeState({\n  scrapeMotionValuesFromProps,\n  createRenderState,\n  onMount\n}, props, context, presenceContext) {\n  const state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n  if (onMount) {\n    state.mount = instance => onMount(props, instance, state);\n  }\n  return state;\n}\nconst makeUseVisualState = config => (props, isStatic) => {\n  const context = React.useContext(MotionContext);\n  const presenceContext = React.useContext(PresenceContext);\n  const make = () => makeState(config, props, context, presenceContext);\n  return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  const values = {};\n  const motionValues = scrapeMotionValues(props, {});\n  for (const key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n  let {\n    initial,\n    animate\n  } = props;\n  const isControllingVariants = indexLegacy.isControllingVariants(props);\n  const isVariantNode = indexLegacy.isVariantNode(props);\n  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  const variantToSet = isInitialAnimationBlocked ? animate : initial;\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !indexLegacy.isAnimationControls(variantToSet)) {\n    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n    list.forEach(definition => {\n      const resolved = indexLegacy.resolveVariantFromProps(props, definition);\n      if (!resolved) return;\n      const {\n        transitionEnd,\n        transition,\n        ...target\n      } = resolved;\n      for (const key in target) {\n        let valueTarget = target[key];\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n        if (valueTarget !== null) {\n          values[key] = valueTarget;\n        }\n      }\n      for (const key in transitionEnd) values[key] = transitionEnd[key];\n    });\n  }\n  return values;\n}\nconst svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onMount: (props, instance, {\n      renderState,\n      latestValues\n    }) => {\n      indexLegacy.frame.read(() => {\n        try {\n          renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n        } catch (e) {\n          // Most likely trying to measure an unrendered element under Firefox\n          renderState.dimensions = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          };\n        }\n      });\n      indexLegacy.frame.render(() => {\n        indexLegacy.buildSVGAttrs(renderState, latestValues, {\n          enableHardwareAcceleration: false\n        }, indexLegacy.isSVGTag(instance.tagName), props.transformTemplate);\n        indexLegacy.renderSVG(instance, renderState);\n      });\n    }\n  })\n};\nconst htmlMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps$1,\n    createRenderState: createHtmlRenderState\n  })\n};\nfunction createDomMotionConfig(Component, {\n  forwardMotionProps = false\n}, preloadedFeatures, createVisualElement) {\n  const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;\n  return {\n    ...baseConfig,\n    preloadedFeatures,\n    useRender: createUseRender(forwardMotionProps),\n    createVisualElement,\n    Component\n  };\n}\nfunction addDomEvent(target, eventName, handler, options = {\n  passive: true\n}) {\n  target.addEventListener(eventName, handler, options);\n  return () => target.removeEventListener(eventName, handler);\n}\nconst isPrimaryPointer = event => {\n  if (event.pointerType === \"mouse\") {\n    return typeof event.button !== \"number\" || event.button <= 0;\n  } else {\n    /**\n     * isPrimary is true for all mice buttons, whereas every touch point\n     * is regarded as its own input. So subsequent concurrent touch points\n     * will be false.\n     *\n     * Specifically match against false here as incomplete versions of\n     * PointerEvents in very old browser might have it set as undefined.\n     */\n    return event.isPrimary !== false;\n  }\n};\nfunction extractEventInfo(event, pointType = \"page\") {\n  return {\n    point: {\n      x: event[pointType + \"X\"],\n      y: event[pointType + \"Y\"]\n    }\n  };\n}\nconst addPointerInfo = handler => {\n  return event => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\nfunction addPointerEvent(target, eventName, handler, options) {\n  return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nfunction createLock(name) {\n  let lock = null;\n  return () => {\n    const openLock = () => {\n      lock = null;\n    };\n    if (lock === null) {\n      lock = name;\n      return openLock;\n    }\n    return false;\n  };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n  let lock = false;\n  if (drag === \"y\") {\n    lock = globalVerticalLock();\n  } else if (drag === \"x\") {\n    lock = globalHorizontalLock();\n  } else {\n    const openHorizontal = globalHorizontalLock();\n    const openVertical = globalVerticalLock();\n    if (openHorizontal && openVertical) {\n      lock = () => {\n        openHorizontal();\n        openVertical();\n      };\n    } else {\n      // Release the locks because we don't use them\n      if (openHorizontal) openHorizontal();\n      if (openVertical) openVertical();\n    }\n  }\n  return lock;\n}\nfunction isDragActive() {\n  // Check the gesture lock - if we get it, it means no drag gesture is active\n  // and we can safely fire the tap gesture.\n  const openGestureLock = getGlobalLock(true);\n  if (!openGestureLock) return true;\n  openGestureLock();\n  return false;\n}\nclass Feature {\n  constructor(node) {\n    this.isMounted = false;\n    this.node = node;\n  }\n  update() {}\n}\nfunction addHoverEvent(node, isActive) {\n  const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n  const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n  const handleEvent = (event, info) => {\n    if (event.type === \"touch\" || isDragActive()) return;\n    const props = node.getProps();\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(\"whileHover\", isActive);\n    }\n    if (props[callbackName]) {\n      indexLegacy.frame.update(() => props[callbackName](event, info));\n    }\n  };\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\nclass HoverGesture extends Feature {\n  mount() {\n    this.unmount = indexLegacy.pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n  }\n  unmount() {}\n}\nclass FocusGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.isActive = false;\n  }\n  onFocus() {\n    let isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n    try {\n      isFocusVisible = this.node.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n    if (!isFocusVisible || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", true);\n    this.isActive = true;\n  }\n  onBlur() {\n    if (!this.isActive || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", false);\n    this.isActive = false;\n  }\n  mount() {\n    this.unmount = indexLegacy.pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n  }\n  unmount() {}\n}\n\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n  if (!child) {\n    return false;\n  } else if (parent === child) {\n    return true;\n  } else {\n    return isNodeOrChild(parent, child.parentElement);\n  }\n};\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removeStartListeners = indexLegacy.noop;\n    this.removeEndListeners = indexLegacy.noop;\n    this.removeAccessibleListeners = indexLegacy.noop;\n    this.startPointerPress = (startEvent, startInfo) => {\n      this.removeEndListeners();\n      if (this.isPressing) return;\n      const props = this.node.getProps();\n      const endPointerPress = (endEvent, endInfo) => {\n        if (!this.checkPressEnd()) return;\n        const {\n          onTap,\n          onTapCancel\n        } = this.node.getProps();\n        indexLegacy.frame.update(() => {\n          /**\n           * We only count this as a tap gesture if the event.target is the same\n           * as, or a child of, this component's element\n           */\n          !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n        });\n      };\n      const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      this.removeEndListeners = indexLegacy.pipe(removePointerUpListener, removePointerCancelListener);\n      this.startPress(startEvent, startInfo);\n    };\n    this.startAccessiblePress = () => {\n      const handleKeydown = keydownEvent => {\n        if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n        const handleKeyup = keyupEvent => {\n          if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", (event, info) => {\n            const {\n              onTap\n            } = this.node.getProps();\n            if (onTap) {\n              indexLegacy.frame.update(() => onTap(event, info));\n            }\n          });\n        };\n        this.removeEndListeners();\n        this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", (event, info) => {\n          this.startPress(event, info);\n        });\n      };\n      const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n      const handleBlur = () => {\n        if (!this.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n      };\n      const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n      this.removeAccessibleListeners = indexLegacy.pipe(removeKeydownListener, removeBlurListener);\n    };\n  }\n  startPress(event, info) {\n    this.isPressing = true;\n    const {\n      onTapStart,\n      whileTap\n    } = this.node.getProps();\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n    if (whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", true);\n    }\n    if (onTapStart) {\n      indexLegacy.frame.update(() => onTapStart(event, info));\n    }\n  }\n  checkPressEnd() {\n    this.removeEndListeners();\n    this.isPressing = false;\n    const props = this.node.getProps();\n    if (props.whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", false);\n    }\n    return !isDragActive();\n  }\n  cancelPress(event, info) {\n    if (!this.checkPressEnd()) return;\n    const {\n      onTapCancel\n    } = this.node.getProps();\n    if (onTapCancel) {\n      indexLegacy.frame.update(() => onTapCancel(event, info));\n    }\n  }\n  mount() {\n    const props = this.node.getProps();\n    const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, {\n      passive: !(props.onTapStart || props[\"onPointerStart\"])\n    });\n    const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n    this.removeStartListeners = indexLegacy.pipe(removePointerListener, removeFocusListener);\n  }\n  unmount() {\n    this.removeStartListeners();\n    this.removeEndListeners();\n    this.removeAccessibleListeners();\n  }\n}\n\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = entry => {\n  const callback = observerCallbacks.get(entry.target);\n  callback && callback(entry);\n};\nconst fireAllObserverCallbacks = entries => {\n  entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({\n  root,\n  ...options\n}) {\n  const lookupRoot = root || document;\n  /**\n   * If we don't have an observer lookup map for this root, create one.\n   */\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n  const rootObservers = observers.get(lookupRoot);\n  const key = JSON.stringify(options);\n  /**\n   * If we don't have an observer for this combination of root and settings,\n   * create one.\n   */\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n      root,\n      ...options\n    });\n  }\n  return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n  const rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return () => {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\nconst thresholdNames = {\n  some: 0,\n  all: 1\n};\nclass InViewFeature extends Feature {\n  constructor() {\n    super(...arguments);\n    this.hasEnteredView = false;\n    this.isInView = false;\n  }\n  startObserver() {\n    this.unmount();\n    const {\n      viewport = {}\n    } = this.node.getProps();\n    const {\n      root,\n      margin: rootMargin,\n      amount = \"some\",\n      once\n    } = viewport;\n    const options = {\n      root: root ? root.current : undefined,\n      rootMargin,\n      threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n    };\n    const onIntersectionUpdate = entry => {\n      const {\n        isIntersecting\n      } = entry;\n      /**\n       * If there's been no change in the viewport state, early return.\n       */\n      if (this.isInView === isIntersecting) return;\n      this.isInView = isIntersecting;\n      /**\n       * Handle hasEnteredView. If this is only meant to run once, and\n       * element isn't visible, early return. Otherwise set hasEnteredView to true.\n       */\n      if (once && !isIntersecting && this.hasEnteredView) {\n        return;\n      } else if (isIntersecting) {\n        this.hasEnteredView = true;\n      }\n      if (this.node.animationState) {\n        this.node.animationState.setActive(\"whileInView\", isIntersecting);\n      }\n      /**\n       * Use the latest committed props rather than the ones in scope\n       * when this observer is created\n       */\n      const {\n        onViewportEnter,\n        onViewportLeave\n      } = this.node.getProps();\n      const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n      callback && callback(entry);\n    };\n    return observeIntersection(this.node.current, options, onIntersectionUpdate);\n  }\n  mount() {\n    this.startObserver();\n  }\n  update() {\n    if (typeof IntersectionObserver === \"undefined\") return;\n    const {\n      props,\n      prevProps\n    } = this.node;\n    const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n    if (hasOptionsChanged) {\n      this.startObserver();\n    }\n  }\n  unmount() {}\n}\nfunction hasViewportOptionChanged({\n  viewport = {}\n}, {\n  viewport: prevViewport = {}\n} = {}) {\n  return name => viewport[name] !== prevViewport[name];\n}\nconst gestureAnimations = {\n  inView: {\n    Feature: InViewFeature\n  },\n  tap: {\n    Feature: PressGesture\n  },\n  focus: {\n    Feature: FocusGesture\n  },\n  hover: {\n    Feature: HoverGesture\n  }\n};\nfunction shallowCompare(next, prev) {\n  if (!Array.isArray(prev)) return false;\n  const prevLength = prev.length;\n  if (prevLength !== next.length) return false;\n  for (let i = 0; i < prevLength; i++) {\n    if (prev[i] !== next[i]) return false;\n  }\n  return true;\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n  const resolved = indexLegacy.resolveVariant(visualElement, variant, options.custom);\n  let {\n    transition = visualElement.getDefaultTransition() || {}\n  } = resolved || {};\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getAnimation = resolved ? () => Promise.all(indexLegacy.animateTarget(visualElement, resolved, options)) : () => Promise.resolve();\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {\n    const {\n      delayChildren = 0,\n      staggerChildren,\n      staggerDirection\n    } = transition;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : () => Promise.resolve();\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n  const {\n    when\n  } = transition;\n  if (when) {\n    const [first, last] = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];\n    return first().then(() => last());\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n  const animations = [];\n  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {\n    child.notify(\"AnimationStart\", variant);\n    animations.push(animateVariant(child, variant, {\n      ...options,\n      delay: delayChildren + generateStaggerDuration(i)\n    }).then(() => child.notify(\"AnimationComplete\", variant)));\n  });\n  return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\nfunction animateVisualElement(visualElement, definition, options = {}) {\n  visualElement.notify(\"AnimationStart\", definition);\n  let animation;\n  if (Array.isArray(definition)) {\n    const animations = definition.map(variant => animateVariant(visualElement, variant, options));\n    animation = Promise.all(animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    const resolvedDefinition = typeof definition === \"function\" ? indexLegacy.resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = Promise.all(indexLegacy.animateTarget(visualElement, resolvedDefinition, options));\n  }\n  return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nconst reversePriorityOrder = [...indexLegacy.variantPriorityOrder].reverse();\nconst numAnimationTypes = indexLegacy.variantPriorityOrder.length;\nfunction animateList(visualElement) {\n  return animations => Promise.all(animations.map(({\n    animation,\n    options\n  }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n  let animate = animateList(visualElement);\n  const state = createState();\n  let isInitialRender = true;\n  /**\n   * This function will be used to reduce the animation definitions for\n   * each active animation type into an object of resolved values for it.\n   */\n  const buildResolvedTypeValues = (acc, definition) => {\n    const resolved = indexLegacy.resolveVariant(visualElement, definition);\n    if (resolved) {\n      const {\n        transition,\n        transitionEnd,\n        ...target\n      } = resolved;\n      acc = {\n        ...acc,\n        ...target,\n        ...transitionEnd\n      };\n    }\n    return acc;\n  };\n  /**\n   * This just allows us to inject mocked animation functions\n   * @internal\n   */\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\n   * When we receive new props, we need to:\n   * 1. Create a list of protected keys for each type. This is a directory of\n   *    value keys that are currently being \"handled\" by types of a higher priority\n   *    so that whenever an animation is played of a given type, these values are\n   *    protected from being animated.\n   * 2. Determine if an animation type needs animating.\n   * 3. Determine if any values have been removed from a type and figure out\n   *    what to animate those to.\n   */\n  function animateChanges(options, changedActiveType) {\n    const props = visualElement.getProps();\n    const context = visualElement.getVariantContext(true) || {};\n    /**\n     * A list of animations that we'll build into as we iterate through the animation\n     * types. This will get executed at the end of the function.\n     */\n    const animations = [];\n    /**\n     * Keep track of which values have been removed. Then, as we hit lower priority\n     * animation types, we can check if they contain removed values and animate to that.\n     */\n    const removedKeys = new Set();\n    /**\n     * A dictionary of all encountered keys. This is an object to let us build into and\n     * copy it without iteration. Each time we hit an animation type we set its protected\n     * keys - the keys its not allowed to animate - to the latest version of this object.\n     */\n    let encounteredKeys = {};\n    /**\n     * If a variant has been removed at a given index, and this component is controlling\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\n     */\n    let removedVariantIndex = Infinity;\n    /**\n     * Iterate through all animation types in reverse priority order. For each, we want to\n     * detect which values it's handling and whether or not they've changed (and therefore\n     * need to be animated). If any values have been removed, we want to detect those in\n     * lower priority props and flag for animation.\n     */\n    for (let i = 0; i < numAnimationTypes; i++) {\n      const type = reversePriorityOrder[i];\n      const typeState = state[type];\n      const prop = props[type] !== undefined ? props[type] : context[type];\n      const propIsVariant = indexLegacy.isVariantLabel(prop);\n      /**\n       * If this type has *just* changed isActive status, set activeDelta\n       * to that status. Otherwise set to null.\n       */\n      const activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\n       * If this prop is an inherited variant, rather than been set directly on the\n       * component itself, we want to make sure we allow the parent to trigger animations.\n       *\n       * TODO: Can probably change this to a !isControllingVariants check\n       */\n      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\n       *\n       */\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\n       * Set all encountered keys so far as the protected keys for this type. This will\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n       */\n      typeState.protectedKeys = {\n        ...encounteredKeys\n      };\n      // Check if we can skip analysing this prop early\n      if (\n      // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null ||\n      // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp ||\n      // Or if the prop doesn't define an animation\n      indexLegacy.isAnimationControls(prop) || typeof prop === \"boolean\") {\n        continue;\n      }\n      /**\n       * As we go look through the values defined on this type, if we detect\n       * a changed value or a value that was removed in a higher priority, we set\n       * this to true and add this prop to the animation list.\n       */\n      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n      let shouldAnimateType = variantDidChange ||\n      // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant ||\n      // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      /**\n       * As animations can be set as variant lists, variants or target objects, we\n       * coerce everything to an array if it isn't one already\n       */\n      const definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\n       * Build an object of all the resolved values. We'll use this in the subsequent\n       * animateChanges calls to determine whether a value has changed.\n       */\n      let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\n       * Now we need to loop through all the keys in the prev prop and this prop,\n       * and decide:\n       * 1. If the value has changed, and needs animating\n       * 2. If it has been removed, and needs adding to the removedKeys set\n       * 3. If it has been removed in a higher priority type and needs animating\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n       *    needs adding to the type's protectedKeys list.\n       */\n      const {\n        prevResolvedValues = {}\n      } = typeState;\n      const allKeys = {\n        ...prevResolvedValues,\n        ...resolvedValues\n      };\n      const markToAnimate = key => {\n        shouldAnimateType = true;\n        removedKeys.delete(key);\n        typeState.needsAnimating[key] = true;\n      };\n      for (const key in allKeys) {\n        const next = resolvedValues[key];\n        const prev = prevResolvedValues[key];\n        // If we've already handled this we can just skip ahead\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\n         * If the value has changed, we probably want to animate it.\n         */\n        if (next !== prev) {\n          /**\n           * If both values are keyframes, we need to shallow compare them to\n           * detect whether any value has changed. If it has, we animate it.\n           */\n          if (indexLegacy.isKeyframesTarget(next) && indexLegacy.isKeyframesTarget(prev)) {\n            if (!shallowCompare(next, prev) || variantDidChange) {\n              markToAnimate(key);\n            } else {\n              /**\n               * If it hasn't changed, we want to ensure it doesn't animate by\n               * adding it to the list of protected keys.\n               */\n              typeState.protectedKeys[key] = true;\n            }\n          } else if (next !== undefined) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\n           * If next hasn't changed and it isn't undefined, we want to check if it's\n           * been removed by a higher priority\n           */\n          markToAnimate(key);\n        } else {\n          /**\n           * If it hasn't changed, we add it to the list of protected values\n           * to ensure it doesn't get animated.\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\n       * Update the typeState so next time animateChanges is called we can compare the\n       * latest prop and resolvedValues to these.\n       */\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\n       *\n       */\n      if (typeState.isActive) {\n        encounteredKeys = {\n          ...encounteredKeys,\n          ...resolvedValues\n        };\n      }\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\n       * If this is an inherited prop we want to hard-block animations\n       * TODO: Test as this should probably still handle animations triggered\n       * by removed values?\n       */\n      if (shouldAnimateType && !isInherited) {\n        animations.push(...definitionList.map(animation => ({\n          animation: animation,\n          options: {\n            type,\n            ...options\n          }\n        })));\n      }\n    }\n    /**\n     * If there are some removed value that haven't been dealt with,\n     * we need to create a new animation that falls back either to the value\n     * defined in the style prop, or the last read value.\n     */\n    if (removedKeys.size) {\n      const fallbackAnimation = {};\n      removedKeys.forEach(key => {\n        const fallbackTarget = visualElement.getBaseTarget(key);\n        if (fallbackTarget !== undefined) {\n          fallbackAnimation[key] = fallbackTarget;\n        }\n      });\n      animations.push({\n        animation: fallbackAnimation\n      });\n    }\n    let shouldAnimate = Boolean(animations.length);\n    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\n   * Change whether a certain animation type is active.\n   */\n  function setActive(type, isActive, options) {\n    var _a;\n    // If the active state hasn't changed, we can safely do nothing here\n    if (state[type].isActive === isActive) return Promise.resolve();\n    // Propagate active change to children\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(child => {\n      var _a;\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    const animations = animateChanges(options, type);\n    for (const key in state) {\n      state[key].protectedKeys = {};\n    }\n    return animations;\n  }\n  return {\n    animateChanges,\n    setActive,\n    setAnimateFunction,\n    getState: () => state\n  };\n}\nfunction checkVariantsDidChange(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (Array.isArray(next)) {\n    return !shallowCompare(next, prev);\n  }\n  return false;\n}\nfunction createTypeState(isActive = false) {\n  return {\n    isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\nfunction createState() {\n  return {\n    animate: createTypeState(true),\n    whileInView: createTypeState(),\n    whileHover: createTypeState(),\n    whileTap: createTypeState(),\n    whileDrag: createTypeState(),\n    whileFocus: createTypeState(),\n    exit: createTypeState()\n  };\n}\nclass AnimationFeature extends Feature {\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  constructor(node) {\n    super(node);\n    node.animationState || (node.animationState = createAnimationState(node));\n  }\n  updateAnimationControlsSubscription() {\n    const {\n      animate\n    } = this.node.getProps();\n    this.unmount();\n    if (indexLegacy.isAnimationControls(animate)) {\n      this.unmount = animate.subscribe(this.node);\n    }\n  }\n  /**\n   * Subscribe any provided AnimationControls to the component's VisualElement\n   */\n  mount() {\n    this.updateAnimationControlsSubscription();\n  }\n  update() {\n    const {\n      animate\n    } = this.node.getProps();\n    const {\n      animate: prevAnimate\n    } = this.node.prevProps || {};\n    if (animate !== prevAnimate) {\n      this.updateAnimationControlsSubscription();\n    }\n  }\n  unmount() {}\n}\nlet id$2 = 0;\nclass ExitAnimationFeature extends Feature {\n  constructor() {\n    super(...arguments);\n    this.id = id$2++;\n  }\n  update() {\n    if (!this.node.presenceContext) return;\n    const {\n      isPresent,\n      onExitComplete,\n      custom\n    } = this.node.presenceContext;\n    const {\n      isPresent: prevIsPresent\n    } = this.node.prevPresenceContext || {};\n    if (!this.node.animationState || isPresent === prevIsPresent) {\n      return;\n    }\n    const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, {\n      custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom\n    });\n    if (onExitComplete && !isPresent) {\n      exitAnimation.then(() => onExitComplete(this.id));\n    }\n  }\n  mount() {\n    const {\n      register\n    } = this.node.presenceContext || {};\n    if (register) {\n      this.unmount = register(this.id);\n    }\n  }\n  unmount() {}\n}\nconst animations = {\n  animation: {\n    Feature: AnimationFeature\n  },\n  exit: {\n    Feature: ExitAnimationFeature\n  }\n};\n\n/**\n * @internal\n */\nclass PanSession {\n  constructor(event, handlers, {\n    transformPagePoint\n  } = {}) {\n    /**\n     * @internal\n     */\n    this.startEvent = null;\n    /**\n     * @internal\n     */\n    this.lastMoveEvent = null;\n    /**\n     * @internal\n     */\n    this.lastMoveEventInfo = null;\n    /**\n     * @internal\n     */\n    this.handlers = {};\n    this.updatePoint = () => {\n      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n      const info = getPanInfo(this.lastMoveEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      // Only start panning if the offset is larger than 3 pixels. If we make it\n      // any larger than this we'll want to reset the pointer history\n      // on the first update to avoid visual snapping to the cursoe.\n      const isDistancePastThreshold = indexLegacy.distance2D(info.offset, {\n        x: 0,\n        y: 0\n      }) >= 3;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        point\n      } = info;\n      const {\n        timestamp\n      } = indexLegacy.frameData;\n      this.history.push({\n        ...point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n      if (!isPanStarted) {\n        onStart && onStart(this.lastMoveEvent, info);\n        this.startEvent = this.lastMoveEvent;\n      }\n      onMove && onMove(this.lastMoveEvent, info);\n    };\n    this.handlePointerMove = (event, info) => {\n      this.lastMoveEvent = event;\n      this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n      // Throttle mouse move event to once per frame\n      indexLegacy.frame.update(this.updatePoint, true);\n    };\n    this.handlePointerUp = (event, info) => {\n      this.end();\n      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      const panInfo = getPanInfo(event.type === \"pointercancel\" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);\n      if (this.startEvent && onEnd) {\n        onEnd(event, panInfo);\n      }\n      onSessionEnd && onSessionEnd(event, panInfo);\n    };\n    // If we have more than one touch, don't start detecting this gesture\n    if (!isPrimaryPointer(event)) return;\n    this.handlers = handlers;\n    this.transformPagePoint = transformPagePoint;\n    const info = extractEventInfo(event);\n    const initialInfo = transformPoint(info, this.transformPagePoint);\n    const {\n      point\n    } = initialInfo;\n    const {\n      timestamp\n    } = indexLegacy.frameData;\n    this.history = [{\n      ...point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n    this.removeListeners = indexLegacy.pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    this.removeListeners && this.removeListeners();\n    indexLegacy.cancelFrame(this.updatePoint);\n  }\n}\nfunction transformPoint(info, transformPagePoint) {\n  return transformPagePoint ? {\n    point: transformPagePoint(info.point)\n  } : info;\n}\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction getPanInfo({\n  point\n}, history) {\n  return {\n    point,\n    delta: subtractPoint(point, lastDevicePoint(history)),\n    offset: subtractPoint(point, startDevicePoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nfunction startDevicePoint(history) {\n  return history[0];\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > indexLegacy.secondsToMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const time = indexLegacy.millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction calcLength(axis) {\n  return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n  return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n  delta.origin = origin;\n  delta.originPoint = indexLegacy.mix(source.min, source.max, delta.origin);\n  delta.scale = calcLength(target) / calcLength(source);\n  if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n  delta.translate = indexLegacy.mix(target.min, target.max, delta.origin) - delta.originPoint;\n  if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n  target.min = parent.min + relative.min;\n  target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n  calcRelativeAxis(target.x, relative.x, parent.x);\n  calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n  target.min = layout.min - parent.min;\n  target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n  calcRelativeAxisPosition(target.x, layout.x, parent.x);\n  calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, {\n  min,\n  max\n}, elastic) {\n  if (min !== undefined && point < min) {\n    // If we have a min point defined, and this is outside of that, constrain\n    point = elastic ? indexLegacy.mix(min, point, elastic.min) : Math.max(point, min);\n  } else if (max !== undefined && point > max) {\n    // If we have a max point defined, and this is outside of that, constrain\n    point = elastic ? indexLegacy.mix(max, point, elastic.max) : Math.min(point, max);\n  }\n  return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n  return {\n    min: min !== undefined ? axis.min + min : undefined,\n    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n  };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, {\n  top,\n  left,\n  bottom,\n  right\n}) {\n  return {\n    x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n  let min = constraintsAxis.min - layoutAxis.min;\n  let max = constraintsAxis.max - layoutAxis.max;\n  // If the constraints axis is actually smaller than the layout axis then we can\n  // flip the constraints\n  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n    [min, max] = [max, min];\n  }\n  return {\n    min,\n    max\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n  return {\n    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n  };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n  let origin = 0.5;\n  const sourceLength = calcLength(source);\n  const targetLength = calcLength(target);\n  if (targetLength > sourceLength) {\n    origin = indexLegacy.progress(target.min, target.max - sourceLength, source.min);\n  } else if (sourceLength > targetLength) {\n    origin = indexLegacy.progress(source.min, source.max - targetLength, target.min);\n  }\n  return indexLegacy.clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n  const relativeConstraints = {};\n  if (constraints.min !== undefined) {\n    relativeConstraints.min = constraints.min - layout.min;\n  }\n  if (constraints.max !== undefined) {\n    relativeConstraints.max = constraints.max - layout.min;\n  }\n  return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n  if (dragElastic === false) {\n    dragElastic = 0;\n  } else if (dragElastic === true) {\n    dragElastic = defaultElastic;\n  }\n  return {\n    x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n    y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n  };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n  return {\n    min: resolvePointElastic(dragElastic, minLabel),\n    max: resolvePointElastic(dragElastic, maxLabel)\n  };\n}\nfunction resolvePointElastic(dragElastic, label) {\n  return typeof dragElastic === \"number\" ? dragElastic : dragElastic[label] || 0;\n}\nfunction eachAxis(callback) {\n  return [callback(\"x\"), callback(\"y\")];\n}\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n    this.elastic = indexLegacy.createBox();\n    this.visualElement = visualElement;\n  }\n  start(originEvent, {\n    snapToCursor = false\n  } = {}) {\n    /**\n     * Don't start dragging if this component is exiting\n     */\n    const {\n      presenceContext\n    } = this.visualElement;\n    if (presenceContext && presenceContext.isPresent === false) return;\n    const onSessionStart = event => {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      this.stopAnimation();\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n    const onStart = (event, info) => {\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n      if (drag && !dragPropagation) {\n        if (this.openGlobalLock) this.openGlobalLock();\n        this.openGlobalLock = getGlobalLock(drag);\n        // If we don 't have the lock, don't start dragging\n        if (!this.openGlobalLock) return;\n      }\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n      eachAxis(axis => {\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\n         * If the MotionValue is a percentage value convert to px\n         */\n        if (indexLegacy.percent.test(current)) {\n          const {\n            projection\n          } = this.visualElement;\n          if (projection && projection.layout) {\n            const measuredAxis = projection.layout.layoutBox[axis];\n            if (measuredAxis) {\n              const length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n        }\n        this.originPoint[axis] = current;\n      });\n      // Fire onDragStart event\n      if (onDragStart) {\n        indexLegacy.frame.update(() => onDragStart(event, info), false, true);\n      }\n      const {\n        animationState\n      } = this.visualElement;\n      animationState && animationState.setActive(\"whileDrag\", true);\n    };\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps();\n      // If we didn't successfully receive the gesture lock, early return.\n      if (!dragPropagation && !this.openGlobalLock) return;\n      const {\n        offset\n      } = info;\n      // Attempt to detect drag direction if directionLock is true\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset);\n        // If we've successfully set a direction, notify listener\n        if (this.currentDirection !== null) {\n          onDirectionLock && onDirectionLock(this.currentDirection);\n        }\n        return;\n      }\n      // Update each point with the latest position\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n      this.visualElement.render();\n      /**\n       * This must fire after the render call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n      onDrag && onDrag(event, info);\n    };\n    const onSessionEnd = (event, info) => this.stop(event, info);\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  }\n  stop(event, info) {\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n    if (onDragEnd) {\n      indexLegacy.frame.update(() => onDragEnd(event, info));\n    }\n  }\n  cancel() {\n    this.isDragging = false;\n    const {\n      projection,\n      animationState\n    } = this.visualElement;\n    if (projection) {\n      projection.isAnimationBlocked = false;\n    }\n    this.panSession && this.panSession.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n    animationState && animationState.setActive(\"whileDrag\", false);\n  }\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps();\n    // If we're not dragging this axis, do an early return.\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis];\n    // Apply constraints\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n    axisValue.set(next);\n  }\n  resolveConstraints() {\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const {\n      layout\n    } = this.visualElement.projection || {};\n    const prevConstraints = this.constraints;\n    if (dragConstraints && indexLegacy.isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !indexLegacy.isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    indexLegacy.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement;\n    // TODO\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = indexLegacy.measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(indexLegacy.convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n      if (userConstraints) {\n        measuredConstraints = indexLegacy.convertBoundingBoxToBox(userConstraints);\n      }\n    }\n    return measuredConstraints;\n  }\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n      let transition = constraints && constraints[axis] || {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = {\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10,\n        ...dragTransition,\n        ...transition\n      };\n      // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n      return this.startAxisValueAnimation(axis, inertia);\n    });\n    // Run all animations and then resolve the new drag constraints.\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    return axisValue.start(indexLegacy.animateMotionValue(axis, axisValue, 0, transition));\n  }\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n  getAxisMotionValue(axis) {\n    const dragKey = \"_drag\" + axis.toUpperCase();\n    const props = this.visualElement.getProps();\n    const externalMotionValue = props[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n  }\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps();\n      // If we're not dragging this axis, do an early return.\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.layoutBox[axis];\n        axisValue.set(point[axis] - indexLegacy.mix(min, max, 0.5));\n      }\n    });\n  }\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n  scalePositionWithinConstraints() {\n    if (!this.visualElement.current) return;\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!indexLegacy.isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n      if (axisValue) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    projection.root && projection.root.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(indexLegacy.mix(min, max, boxProgress[axis]));\n    });\n  }\n  addListeners() {\n    if (!this.visualElement.current) return;\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.current;\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n      if (indexLegacy.isRefObject(dragConstraints)) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n    if (projection && !projection.layout) {\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n    }\n    measureDragConstraints();\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", ({\n      delta,\n      hasLayoutChanged\n    }) => {\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.render();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener && stopLayoutUpdateListener();\n    };\n  }\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return {\n      ...props,\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    };\n  }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n  let direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nclass DragGesture extends Feature {\n  constructor(node) {\n    super(node);\n    this.removeGroupControls = indexLegacy.noop;\n    this.removeListeners = indexLegacy.noop;\n    this.controls = new VisualElementDragControls(node);\n  }\n  mount() {\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    const {\n      dragControls\n    } = this.node.getProps();\n    if (dragControls) {\n      this.removeGroupControls = dragControls.subscribe(this.controls);\n    }\n    this.removeListeners = this.controls.addListeners() || indexLegacy.noop;\n  }\n  unmount() {\n    this.removeGroupControls();\n    this.removeListeners();\n  }\n}\nconst asyncHandler = handler => (event, info) => {\n  if (handler) {\n    indexLegacy.frame.update(() => handler(event, info));\n  }\n};\nclass PanGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removePointerDownListener = indexLegacy.noop;\n  }\n  onPointerDown(pointerDownEvent) {\n    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n      transformPagePoint: this.node.getTransformPagePoint()\n    });\n  }\n  createPanHandlers() {\n    const {\n      onPanSessionStart,\n      onPanStart,\n      onPan,\n      onPanEnd\n    } = this.node.getProps();\n    return {\n      onSessionStart: asyncHandler(onPanSessionStart),\n      onStart: asyncHandler(onPanStart),\n      onMove: onPan,\n      onEnd: (event, info) => {\n        delete this.session;\n        if (onPanEnd) {\n          indexLegacy.frame.update(() => onPanEnd(event, info));\n        }\n      }\n    };\n  }\n  mount() {\n    this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", event => this.onPointerDown(event));\n  }\n  update() {\n    this.session && this.session.updateHandlers(this.createPanHandlers());\n  }\n  unmount() {\n    this.removePointerDownListener();\n    this.session && this.session.end();\n  }\n}\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = value => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = value => typeof value === \"number\" || indexLegacy.px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n  if (shouldCrossfadeOpacity) {\n    target.opacity = indexLegacy.mix(0,\n    // TODO Reinstate this if only child\n    lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n    target.opacityExit = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n  } else if (isOnlyMember) {\n    target.opacity = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n  }\n  /**\n   * Mix border radius\n   */\n  for (let i = 0; i < numBorders; i++) {\n    const borderLabel = `border${borders[i]}Radius`;\n    let followRadius = getRadius(follow, borderLabel);\n    let leadRadius = getRadius(lead, borderLabel);\n    if (followRadius === undefined && leadRadius === undefined) continue;\n    followRadius || (followRadius = 0);\n    leadRadius || (leadRadius = 0);\n    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n    if (canMix) {\n      target[borderLabel] = Math.max(indexLegacy.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n      if (indexLegacy.percent.test(leadRadius) || indexLegacy.percent.test(followRadius)) {\n        target[borderLabel] += \"%\";\n      }\n    } else {\n      target[borderLabel] = leadRadius;\n    }\n  }\n  /**\n   * Mix rotation\n   */\n  if (follow.rotate || lead.rotate) {\n    target.rotate = indexLegacy.mix(follow.rotate || 0, lead.rotate || 0, progress);\n  }\n}\nfunction getRadius(values, radiusName) {\n  return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, indexLegacy.circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, indexLegacy.noop);\nfunction compress(min, max, easing) {\n  return p => {\n    // Could replace ifs with clamp\n    if (p < min) return 0;\n    if (p > max) return 1;\n    return easing(indexLegacy.progress(min, max, p));\n  };\n}\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n  axis.min = originAxis.min;\n  axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n  copyAxisInto(box.x, originBox.x);\n  copyAxisInto(box.y, originBox.y);\n}\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = indexLegacy.scalePoint(point, 1 / scale, originPoint);\n  if (boxScale !== undefined) {\n    point = indexLegacy.scalePoint(point, 1 / boxScale, originPoint);\n  }\n  return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n  if (indexLegacy.percent.test(translate)) {\n    translate = parseFloat(translate);\n    const relativeProgress = indexLegacy.mix(sourceAxis.min, sourceAxis.max, translate / 100);\n    translate = relativeProgress - sourceAxis.min;\n  }\n  if (typeof translate !== \"number\") return;\n  let originPoint = indexLegacy.mix(originAxis.min, originAxis.max, origin);\n  if (axis === originAxis) originPoint -= translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\nfunction isAxisDeltaZero(delta) {\n  return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n  return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\nfunction boxEqualsRounded(a, b) {\n  return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);\n}\nfunction aspectRatio(box) {\n  return calcLength(box.x) / calcLength(box.y);\n}\nclass NodeStack {\n  constructor() {\n    this.members = [];\n  }\n  add(node) {\n    indexLegacy.addUniqueItem(this.members, node);\n    node.scheduleRender();\n  }\n  remove(node) {\n    indexLegacy.removeItem(this.members, node);\n    if (node === this.prevLead) {\n      this.prevLead = undefined;\n    }\n    if (node === this.lead) {\n      const prevLead = this.members[this.members.length - 1];\n      if (prevLead) {\n        this.promote(prevLead);\n      }\n    }\n  }\n  relegate(node) {\n    const indexOfNode = this.members.findIndex(member => node === member);\n    if (indexOfNode === 0) return false;\n    /**\n     * Find the next projection node that is present\n     */\n    let prevLead;\n    for (let i = indexOfNode; i >= 0; i--) {\n      const member = this.members[i];\n      if (member.isPresent !== false) {\n        prevLead = member;\n        break;\n      }\n    }\n    if (prevLead) {\n      this.promote(prevLead);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  promote(node, preserveFollowOpacity) {\n    const prevLead = this.lead;\n    if (node === prevLead) return;\n    this.prevLead = prevLead;\n    this.lead = node;\n    node.show();\n    if (prevLead) {\n      prevLead.instance && prevLead.scheduleRender();\n      node.scheduleRender();\n      node.resumeFrom = prevLead;\n      if (preserveFollowOpacity) {\n        node.resumeFrom.preserveOpacity = true;\n      }\n      if (prevLead.snapshot) {\n        node.snapshot = prevLead.snapshot;\n        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n      }\n      if (node.root && node.root.isUpdating) {\n        node.isLayoutDirty = true;\n      }\n      const {\n        crossfade\n      } = node.options;\n      if (crossfade === false) {\n        prevLead.hide();\n      }\n      /**\n       * TODO:\n       *   - Test border radius when previous node was deleted\n       *   - boxShadow mixing\n       *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n       *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n       *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n       * ---\n       *   - Crossfade opacity of root nodes\n       *   - layoutId changes after animation\n       *   - layoutId changes mid animation\n       */\n    }\n  }\n\n  exitAnimationComplete() {\n    this.members.forEach(node => {\n      const {\n        options,\n        resumingFrom\n      } = node;\n      options.onExitComplete && options.onExitComplete();\n      if (resumingFrom) {\n        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n      }\n    });\n  }\n  scheduleRender() {\n    this.members.forEach(node => {\n      node.instance && node.scheduleRender(false);\n    });\n  }\n  /**\n   * Clear any leads that have been removed this render to prevent them from being\n   * used in future animations and to prevent memory leaks\n   */\n  removeLeadSnapshot() {\n    if (this.lead && this.lead.snapshot) {\n      this.lead.snapshot = undefined;\n    }\n  }\n}\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  let transform = \"\";\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  const xTranslate = delta.x.translate / treeScale.x;\n  const yTranslate = delta.y.translate / treeScale.y;\n  if (xTranslate || yTranslate) {\n    transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n  }\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n  if (treeScale.x !== 1 || treeScale.y !== 1) {\n    transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n  }\n  if (latestTransform) {\n    const {\n      rotate,\n      rotateX,\n      rotateY\n    } = latestTransform;\n    if (rotate) transform += `rotate(${rotate}deg) `;\n    if (rotateX) transform += `rotateX(${rotateX}deg) `;\n    if (rotateY) transform += `rotateY(${rotateY}deg) `;\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n  const elementScaleX = delta.x.scale * treeScale.x;\n  const elementScaleY = delta.y.scale * treeScale.y;\n  if (elementScaleX !== 1 || elementScaleY !== 1) {\n    transform += `scale(${elementScaleX}, ${elementScaleY})`;\n  }\n  return transform || \"none\";\n}\nconst compareByDepth = (a, b) => a.depth - b.depth;\nclass FlatTree {\n  constructor() {\n    this.children = [];\n    this.isDirty = false;\n  }\n  add(child) {\n    indexLegacy.addUniqueItem(this.children, child);\n    this.isDirty = true;\n  }\n  remove(child) {\n    indexLegacy.removeItem(this.children, child);\n    this.isDirty = true;\n  }\n  forEach(callback) {\n    this.isDirty && this.children.sort(compareByDepth);\n    this.isDirty = false;\n    this.children.forEach(callback);\n  }\n}\n\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n  /**\n   * Global flag as to whether the tree has animated since the last time\n   * we resized the window\n   */\n  hasAnimatedSinceResize: true,\n  /**\n   * We set this to true once, on the first update. Any nodes added to the tree beyond that\n   * update will be given a `data-projection-id` attribute.\n   */\n  hasEverUpdated: false\n};\nfunction record(data) {\n  if (window.MotionDebug) {\n    window.MotionDebug.record(data);\n  }\n}\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id$1 = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\nfunction createProjectionNode({\n  attachResizeListener,\n  defaultParent,\n  measureScroll,\n  checkIsScrollRoot,\n  resetTransform\n}) {\n  return class ProjectionNode {\n    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id$1++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false;\n      // Note: Currently only running on root node\n      this.updateScheduled = false;\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = () => {\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n        this.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new indexLegacy.SubscriptionManager());\n      }\n      return this.eventHandlers.get(name).add(handler);\n    }\n    notifyListeners(name, ...args) {\n      const subscriptionManager = this.eventHandlers.get(name);\n      subscriptionManager && subscriptionManager.notify(...args);\n    }\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n    /**\n     * Lifecycles\n     */\n    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n      if (this.instance) return;\n      this.isSVG = indexLegacy.isSVGElement(instance);\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n      this.root.nodes.add(this);\n      this.parent && this.parent.children.add(this);\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n      if (attachResizeListener) {\n        let cancelDelay;\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = indexLegacy.delay(resizeUnblockUpdate, 250);\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      }\n      // Only register the handler if it requires layout animation\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", ({\n          delta,\n          hasLayoutChanged,\n          hasRelativeTargetChanged,\n          layout: newLayout\n        }) => {\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          }\n          // TODO: Check here if an animation exists\n          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = {\n              ...indexLegacy.getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged) {\n              finishAnimation(this);\n            }\n            if (this.isLead() && this.options.onExitComplete) {\n              this.options.onExitComplete();\n            }\n          }\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n    unmount() {\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      const stack = this.getStack();\n      stack && stack.remove(this);\n      this.parent && this.parent.children.delete(this);\n      this.instance = undefined;\n      indexLegacy.cancelFrame(this.updateProjection);\n    }\n    // only on the root\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n    isTreeAnimationBlocked() {\n      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n    }\n    // Note: currently only running on root node\n    startUpdate() {\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      this.nodes && this.nodes.forEach(resetRotation);\n      this.animationId++;\n    }\n    getTransformTemplate() {\n      const {\n        visualElement\n      } = this.options;\n      return visualElement && visualElement.getProps().transformTemplate;\n    }\n    willUpdate(shouldNotifyListeners = true) {\n      this.root.hasTreeAnimated = true;\n      if (this.root.isUpdateBlocked()) {\n        this.options.onExitComplete && this.options.onExitComplete();\n        return;\n      }\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = this.getTransformTemplate();\n      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }\n    update() {\n      this.updateScheduled = false;\n      const updateWasBlocked = this.isUpdateBlocked();\n      // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n      if (!this.isUpdating) {\n        this.nodes.forEach(clearIsLayoutDirty);\n      }\n      this.isUpdating = false;\n      /**\n       * Write\n       */\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      /**\n       * Manually flush any pending updates. Ideally\n       * we could leave this to the following requestAnimationFrame but this seems\n       * to leave a flash of incorrectly styled content.\n       */\n      const now = performance.now();\n      indexLegacy.frameData.delta = indexLegacy.clamp(0, 1000 / 60, now - indexLegacy.frameData.timestamp);\n      indexLegacy.frameData.timestamp = now;\n      indexLegacy.frameData.isProcessing = true;\n      indexLegacy.steps.update.process(indexLegacy.frameData);\n      indexLegacy.steps.preRender.process(indexLegacy.frameData);\n      indexLegacy.steps.render.process(indexLegacy.frameData);\n      indexLegacy.frameData.isProcessing = false;\n    }\n    didUpdate() {\n      if (!this.updateScheduled) {\n        this.updateScheduled = true;\n        queueMicrotask(() => this.update());\n      }\n    }\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n    scheduleUpdateProjection() {\n      indexLegacy.frame.preRender(this.updateProjection, false, true);\n    }\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      indexLegacy.frame.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n    updateLayout() {\n      if (!this.instance) return;\n      // TODO: Incorporate into a forwarded scroll offset\n      this.updateScroll();\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = indexLegacy.createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      const {\n        visualElement\n      } = this.options;\n      visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n    }\n    updateScroll(phase = \"measure\") {\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n      if (needsMeasurement) {\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot: checkIsScrollRoot(this.instance),\n          offset: measureScroll(this.instance)\n        };\n      }\n    }\n    resetTransform() {\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = this.getTransformTemplate();\n      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n      if (isResetRequested && (hasProjection || indexLegacy.hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n    measure(removeTransform = true) {\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return indexLegacy.createBox();\n      const box = visualElement.measureViewportBox();\n      // Remove viewport scroll to give page-relative coordinates\n      const {\n        scroll\n      } = this.root;\n      if (scroll) {\n        indexLegacy.translateAxis(box.x, scroll.offset.x);\n        indexLegacy.translateAxis(box.y, scroll.offset.y);\n      }\n      return box;\n    }\n    removeElementScroll(box) {\n      const boxWithoutScroll = indexLegacy.createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (scroll.isRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n            if (rootScroll) {\n              indexLegacy.translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n              indexLegacy.translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n            }\n          }\n          indexLegacy.translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          indexLegacy.translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n      return boxWithoutScroll;\n    }\n    applyTransform(box, transformOnly = false) {\n      const withTransforms = indexLegacy.createBox();\n      copyBoxInto(withTransforms, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          indexLegacy.transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n        if (!indexLegacy.hasTransform(node.latestValues)) continue;\n        indexLegacy.transformBox(withTransforms, node.latestValues);\n      }\n      if (indexLegacy.hasTransform(this.latestValues)) {\n        indexLegacy.transformBox(withTransforms, this.latestValues);\n      }\n      return withTransforms;\n    }\n    removeTransform(box) {\n      const boxWithoutTransform = indexLegacy.createBox();\n      copyBoxInto(boxWithoutTransform, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!indexLegacy.hasTransform(node.latestValues)) continue;\n        indexLegacy.hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = indexLegacy.createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n      }\n      if (indexLegacy.hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n      return boxWithoutTransform;\n    }\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n      this.isProjectionDirty = true;\n    }\n    setOptions(options) {\n      this.options = {\n        ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    forceRelativeParentToResolveTarget() {\n      if (!this.relativeParent) return;\n      /**\n       * If the parent target isn't up-to-date, force it to update.\n       * This is an unfortunate de-optimisation as it means any updating relative\n       * projection will cause all the relative parents to recalculate back\n       * up the tree.\n       */\n      if (this.relativeParent.resolvedRelativeTargetAt !== indexLegacy.frameData.timestamp) {\n        this.relativeParent.resolveTargetDelta(true);\n      }\n    }\n    resolveTargetDelta(forceRecalculation = false) {\n      var _a;\n      /**\n       * Once the dirty status of nodes has been spread through the tree, we also\n       * need to check if we have a shared node of a different depth that has itself\n       * been dirtied.\n       */\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      /**\n       * We don't use transform for this step of processing so we don't\n       * need to check whether any nodes have changed transform.\n       */\n      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n      if (!this.layout || !(layout || layoutId)) return;\n      this.resolvedRelativeTargetAt = indexLegacy.frameData.timestamp;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = indexLegacy.createBox();\n          this.relativeTargetOrigin = indexLegacy.createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n      if (!this.target) {\n        this.target = indexLegacy.createBox();\n        this.targetWithTransforms = indexLegacy.createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n        this.forceRelativeParentToResolveTarget();\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        indexLegacy.applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = indexLegacy.createBox();\n          this.relativeTargetOrigin = indexLegacy.createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * Increase debug counter for resolved target deltas\n       */\n      projectionFrameData.resolvedTargetDeltas++;\n    }\n    getClosestProjectingParent() {\n      if (!this.parent || indexLegacy.hasScale(this.parent.latestValues) || indexLegacy.has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n      if (this.parent.isProjecting()) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n    isProjecting() {\n      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n    }\n    calcProjection() {\n      var _a;\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      /**\n       * If this is a normal layout animation and neither this node nor its nearest projecting\n       * is dirty then we can't skip.\n       */\n      if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If this is a shared layout animation and this node's shared projection is dirty then\n       * we can't skip.\n       */\n      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If we have resolved the target this frame we must recalculate the\n       * projection to ensure it visually represents the internal calculations.\n       */\n      if (this.resolvedRelativeTargetAt === indexLegacy.frameData.timestamp) {\n        canSkip = false;\n      }\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Record previous tree scales before updating.\n       */\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n      indexLegacy.applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      /**\n       * If this layer needs to perform scale correction but doesn't have a target,\n       * use the layout as the target.\n       */\n      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n        lead.target = lead.layout.layoutBox;\n      }\n      const {\n        target\n      } = lead;\n      if (!target) {\n        /**\n         * If we don't have a target to project into, but we were previously\n         * projecting, we want to remove the stored transform and schedule\n         * a render to ensure the elements reflect the removed transform.\n         */\n        if (this.projectionTransform) {\n          this.projectionDelta = indexLegacy.createDelta();\n          this.projectionTransform = \"none\";\n          this.scheduleRender();\n        }\n        return;\n      }\n      if (!this.projectionDelta) {\n        this.projectionDelta = indexLegacy.createDelta();\n        this.projectionDeltaWithTransform = indexLegacy.createDelta();\n      }\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n      /**\n       * Increase debug counter for recalculated projections\n       */\n      projectionFrameData.recalculatedProjection++;\n    }\n    hide() {\n      this.isVisible = false;\n      // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true;\n      // TODO: Schedule render\n    }\n\n    scheduleRender(notifyAll = true) {\n      this.options.scheduleRender && this.options.scheduleRender();\n      if (notifyAll) {\n        const stack = this.getStack();\n        stack && stack.scheduleRender();\n      }\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n      const mixedValues = {\n        ...this.latestValues\n      };\n      const targetDelta = indexLegacy.createDelta();\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = indexLegacy.createBox();\n      const snapshotSource = snapshot ? snapshot.source : undefined;\n      const layoutSource = this.layout ? this.layout.source : undefined;\n      const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n      const stack = this.getStack();\n      const isOnlyMember = !stack || stack.members.length <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      let prevRelativeTarget;\n      this.mixTargetDelta = latest => {\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n          /**\n           * If this is an unchanged relative target we can consider the\n           * projection not dirty.\n           */\n          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n            this.isProjectionDirty = false;\n          }\n          if (!prevRelativeTarget) prevRelativeTarget = indexLegacy.createBox();\n          copyBoxInto(prevRelativeTarget, this.relativeTarget);\n        }\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n    startAnimation(options) {\n      this.notifyListeners(\"animationStart\");\n      this.currentAnimation && this.currentAnimation.stop();\n      if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n        this.resumingFrom.currentAnimation.stop();\n      }\n      if (this.pendingAnimation) {\n        indexLegacy.cancelFrame(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n      this.pendingAnimation = indexLegacy.frame.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = indexLegacy.animateSingleValue(0, animationTarget, {\n          ...options,\n          onUpdate: latest => {\n            this.mixTargetDelta(latest);\n            options.onUpdate && options.onUpdate(latest);\n          },\n          onComplete: () => {\n            options.onComplete && options.onComplete();\n            this.completeAnimation();\n          }\n        });\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n        this.pendingAnimation = undefined;\n      });\n    }\n    completeAnimation() {\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n      const stack = this.getStack();\n      stack && stack.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n    finishAnimation() {\n      if (this.currentAnimation) {\n        this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n        this.currentAnimation.stop();\n      }\n      this.completeAnimation();\n    }\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || indexLegacy.createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n      indexLegacy.transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n    registerSharedNode(layoutId, node) {\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      const config = node.options.initialPromotionConfig;\n      node.promote({\n        transition: config ? config.transition : undefined,\n        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n      });\n    }\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n    getLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n    getPrevLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n    promote({\n      needsReset,\n      transition,\n      preserveFollowOpacity\n    } = {}) {\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n    relegate() {\n      const stack = this.getStack();\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return;\n      // If there's no detected rotation values, we can early return without a forced render.\n      let hasRotate = false;\n      /**\n       * An unrolled check for rotation values. Most elements don't have any rotation and\n       * skipping the nested loop and new object creation is 50% faster.\n       */\n      const {\n        latestValues\n      } = visualElement;\n      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n        hasRotate = true;\n      }\n      // If there's no rotation values, we don't need to do any more.\n      if (!hasRotate) return;\n      const resetValues = {};\n      // Check the rotate value of all axes and reset to 0\n      for (let i = 0; i < transformAxes.length; i++) {\n        const key = \"rotate\" + transformAxes[i];\n        // Record the rotation and then temporarily set it to 0\n        if (latestValues[key]) {\n          resetValues[key] = latestValues[key];\n          visualElement.setStaticValue(key, 0);\n        }\n      }\n      // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n      visualElement.render();\n      // Put back all the values we reset\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      }\n      // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n      visualElement.scheduleRender();\n    }\n    getProjectionStyles(styleProp = {}) {\n      var _a, _b;\n      // TODO: Return lifecycle-persistent object\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n      const transformTemplate = this.getTransformTemplate();\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n      const lead = this.getLead();\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n        if (this.hasProjected && !indexLegacy.hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n        return emptyStyles;\n      }\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n      for (const key in indexLegacy.scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = indexLegacy.scaleCorrectors[key];\n        /**\n         * Only apply scale correction to the value if we have an\n         * active projection transform. Otherwise these values become\n         * vulnerable to distortion if the element changes size without\n         * a corresponding layout animation.\n         */\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n        if (applyTo) {\n          const num = applyTo.length;\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n      return styles;\n    }\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    }\n    // Only run on root\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n  };\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n    const layoutDelta = indexLegacy.createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = indexLegacy.createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = indexLegacy.createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = indexLegacy.createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    const {\n      onExitComplete\n    } = node.options;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = indexLegacy.mix(delta.translate, 0, p);\n  output.scale = indexLegacy.mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = indexLegacy.mix(from.min, to.min, p);\n  output.max = indexLegacy.mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nconst userAgentContains = string => typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : indexLegacy.noop;\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nconst DocumentProjectionNode = createProjectionNode({\n  attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n  measureScroll: () => ({\n    x: document.documentElement.scrollLeft || document.body.scrollLeft,\n    y: document.documentElement.scrollTop || document.body.scrollTop\n  }),\n  checkIsScrollRoot: () => true\n});\nconst rootProjectionNode = {\n  current: undefined\n};\nconst HTMLProjectionNode = createProjectionNode({\n  measureScroll: instance => ({\n    x: instance.scrollLeft,\n    y: instance.scrollTop\n  }),\n  defaultParent: () => {\n    if (!rootProjectionNode.current) {\n      const documentNode = new DocumentProjectionNode({});\n      documentNode.mount(window);\n      documentNode.setOptions({\n        layoutScroll: true\n      });\n      rootProjectionNode.current = documentNode;\n    }\n    return rootProjectionNode.current;\n  },\n  resetTransform: (instance, value) => {\n    instance.style.transform = value !== undefined ? value : \"none\";\n  },\n  checkIsScrollRoot: instance => Boolean(window.getComputedStyle(instance).position === \"fixed\")\n});\nconst notify = node => !node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n  const nodes = new Set();\n  const subscriptions = new WeakMap();\n  const dirtyAll = () => nodes.forEach(notify);\n  return {\n    add: node => {\n      nodes.add(node);\n      subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n    },\n    remove: node => {\n      nodes.delete(node);\n      const unsubscribe = subscriptions.get(node);\n      if (unsubscribe) {\n        unsubscribe();\n        subscriptions.delete(node);\n      }\n      dirtyAll();\n    },\n    dirty: dirtyAll\n  };\n}\nfunction pixelsToPercent(pixels, axis) {\n  if (axis.max === axis.min) return 0;\n  return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n  correct: (latest, node) => {\n    if (!node.target) return latest;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n      if (indexLegacy.px.test(latest)) {\n        latest = parseFloat(latest);\n      } else {\n        return latest;\n      }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    const x = pixelsToPercent(latest, node.target.x);\n    const y = pixelsToPercent(latest, node.target.y);\n    return `${x}% ${y}%`;\n  }\n};\nconst correctBoxShadow = {\n  correct: (latest, {\n    treeScale,\n    projectionDelta\n  }) => {\n    const original = latest;\n    const shadow = indexLegacy.complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5) return original;\n    const template = indexLegacy.complex.createTransformer(latest);\n    const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    const xScale = projectionDelta.x.scale * treeScale.x;\n    const yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    const averageScale = indexLegacy.mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    return template(shadow);\n  }\n};\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n  const context = React.useContext(PresenceContext);\n  if (context === null) return [true, null];\n  const {\n    isPresent,\n    onExitComplete,\n    register\n  } = context;\n  // It's safe to call the following hooks conditionally (after an early return) because the context will always\n  // either be null or non-null for the lifespan of the component.\n  const id = React.useId();\n  React.useEffect(() => register(id), []);\n  const safeToRemove = () => onExitComplete && onExitComplete(id);\n  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n  return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n  return context === null ? true : context.isPresent;\n}\nclass MeasureLayoutWithContext extends React__default[\"default\"].Component {\n  /**\n   * This only mounts projection nodes for components that\n   * need measuring, we might want to do it for all components\n   * in order to incorporate transforms\n   */\n  componentDidMount() {\n    const {\n      visualElement,\n      layoutGroup,\n      switchLayoutGroup,\n      layoutId\n    } = this.props;\n    const {\n      projection\n    } = visualElement;\n    indexLegacy.addScaleCorrector(defaultScaleCorrectors);\n    if (projection) {\n      if (layoutGroup.group) layoutGroup.group.add(projection);\n      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n        switchLayoutGroup.register(projection);\n      }\n      projection.root.didUpdate();\n      projection.addEventListener(\"animationComplete\", () => {\n        this.safeToRemove();\n      });\n      projection.setOptions({\n        ...projection.options,\n        onExitComplete: () => this.safeToRemove()\n      });\n    }\n    globalProjectionState.hasEverUpdated = true;\n  }\n  getSnapshotBeforeUpdate(prevProps) {\n    const {\n      layoutDependency,\n      visualElement,\n      drag,\n      isPresent\n    } = this.props;\n    const projection = visualElement.projection;\n    if (!projection) return null;\n    /**\n     * TODO: We use this data in relegate to determine whether to\n     * promote a previous element. There's no guarantee its presence data\n     * will have updated by this point - if a bug like this arises it will\n     * have to be that we markForRelegation and then find a new lead some other way,\n     * perhaps in didUpdate\n     */\n    projection.isPresent = isPresent;\n    if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n      projection.willUpdate();\n    } else {\n      this.safeToRemove();\n    }\n    if (prevProps.isPresent !== isPresent) {\n      if (isPresent) {\n        projection.promote();\n      } else if (!projection.relegate()) {\n        /**\n         * If there's another stack member taking over from this one,\n         * it's in charge of the exit animation and therefore should\n         * be in charge of the safe to remove. Otherwise we call it here.\n         */\n        indexLegacy.frame.postRender(() => {\n          const stack = projection.getStack();\n          if (!stack || !stack.members.length) {\n            this.safeToRemove();\n          }\n        });\n      }\n    }\n    return null;\n  }\n  componentDidUpdate() {\n    const {\n      projection\n    } = this.props.visualElement;\n    if (projection) {\n      projection.root.didUpdate();\n      queueMicrotask(() => {\n        if (!projection.currentAnimation && projection.isLead()) {\n          this.safeToRemove();\n        }\n      });\n    }\n  }\n  componentWillUnmount() {\n    const {\n      visualElement,\n      layoutGroup,\n      switchLayoutGroup: promoteContext\n    } = this.props;\n    const {\n      projection\n    } = visualElement;\n    if (projection) {\n      projection.scheduleCheckAfterUnmount();\n      if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n      if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n    }\n  }\n  safeToRemove() {\n    const {\n      safeToRemove\n    } = this.props;\n    safeToRemove && safeToRemove();\n  }\n  render() {\n    return null;\n  }\n}\nfunction MeasureLayout(props) {\n  const [isPresent, safeToRemove] = usePresence();\n  const layoutGroup = React.useContext(LayoutGroupContext);\n  return React__default[\"default\"].createElement(MeasureLayoutWithContext, {\n    ...props,\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: React.useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  });\n}\nconst defaultScaleCorrectors = {\n  borderRadius: {\n    ...correctBorderRadius,\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  },\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nconst drag = {\n  pan: {\n    Feature: PanGesture\n  },\n  drag: {\n    Feature: DragGesture,\n    ProjectionNode: HTMLProjectionNode,\n    MeasureLayout\n  }\n};\nconst createDomVisualElement = (Component, options) => {\n  return isSVGComponent(Component) ? new indexLegacy.SVGVisualElement(options, {\n    enableHardwareAcceleration: false\n  }) : new indexLegacy.HTMLVisualElement(options, {\n    enableHardwareAcceleration: true\n  });\n};\nconst layout = {\n  layout: {\n    ProjectionNode: HTMLProjectionNode,\n    MeasureLayout\n  }\n};\nconst preloadedFeatures = {\n  ...animations,\n  ...gestureAnimations,\n  ...drag,\n  ...layout\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n  return createMotionComponent(createDomMotionConfig(key, {\n    forwardMotionProps: false\n  }, preloadedFeatures, createDomVisualElement));\n}\n\n/**\n * @public\n */\nconst m = createMotionProxy(createDomMotionConfig);\nfunction useIsMounted() {\n  const isMounted = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\nfunction useForceUpdate() {\n  const isMounted = useIsMounted();\n  const [forcedRenderCount, setForcedRenderCount] = React.useState(0);\n  const forceRender = React.useCallback(() => {\n    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n  }, [forcedRenderCount]);\n  /**\n   * Defer this to the end of the next animation frame in case there are multiple\n   * synchronous calls.\n   */\n  const deferredForceRender = React.useCallback(() => indexLegacy.frame.postRender(forceRender), [forceRender]);\n  return [deferredForceRender, forcedRenderCount];\n}\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React__namespace.Component {\n  getSnapshotBeforeUpdate(prevProps) {\n    const element = this.props.childRef.current;\n    if (element && prevProps.isPresent && !this.props.isPresent) {\n      const size = this.props.sizeRef.current;\n      size.height = element.offsetHeight || 0;\n      size.width = element.offsetWidth || 0;\n      size.top = element.offsetTop;\n      size.left = element.offsetLeft;\n    }\n    return null;\n  }\n  /**\n   * Required with getSnapshotBeforeUpdate to stop React complaining.\n   */\n  componentDidUpdate() {}\n  render() {\n    return this.props.children;\n  }\n}\nfunction PopChild({\n  children,\n  isPresent\n}) {\n  const id = React.useId();\n  const ref = React.useRef(null);\n  const size = React.useRef({\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  });\n  /**\n   * We create and inject a style block so we can apply this explicit\n   * sizing in a non-destructive manner by just deleting the style block.\n   *\n   * We can't apply size via render as the measurement happens\n   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n   * styles directly on the DOM node, we might be overwriting\n   * styles set via the style prop.\n   */\n  React.useInsertionEffect(() => {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = size.current;\n    if (isPresent || !ref.current || !width || !height) return;\n    ref.current.dataset.motionPopId = id;\n    const style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    if (style.sheet) {\n      style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n    }\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, [isPresent]);\n  return React__namespace.createElement(PopChildMeasure, {\n    isPresent: isPresent,\n    childRef: ref,\n    sizeRef: size\n  }, React__namespace.cloneElement(children, {\n    ref\n  }));\n}\nconst PresenceChild = ({\n  children,\n  initial,\n  isPresent,\n  onExitComplete,\n  custom,\n  presenceAffectsLayout,\n  mode\n}) => {\n  const presenceChildren = useConstant(newChildrenMap);\n  const id = React.useId();\n  const context = React.useMemo(() => ({\n    id,\n    initial,\n    isPresent,\n    custom,\n    onExitComplete: childId => {\n      presenceChildren.set(childId, true);\n      for (const isComplete of presenceChildren.values()) {\n        if (!isComplete) return; // can stop searching when any is incomplete\n      }\n\n      onExitComplete && onExitComplete();\n    },\n    register: childId => {\n      presenceChildren.set(childId, false);\n      return () => presenceChildren.delete(childId);\n    }\n  }),\n  /**\n   * If the presence of a child affects the layout of the components around it,\n   * we want to make a new context value to ensure they get re-rendered\n   * so they can detect that layout change.\n   */\n  presenceAffectsLayout ? undefined : [isPresent]);\n  React.useMemo(() => {\n    presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n  }, [isPresent]);\n  /**\n   * If there's no `motion` components to fire exit animations, we want to remove this\n   * component immediately.\n   */\n  React__namespace.useEffect(() => {\n    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n  }, [isPresent]);\n  if (mode === \"popLayout\") {\n    children = React__namespace.createElement(PopChild, {\n      isPresent: isPresent\n    }, children);\n  }\n  return React__namespace.createElement(PresenceContext.Provider, {\n    value: context\n  }, children);\n};\nfunction newChildrenMap() {\n  return new Map();\n}\nfunction useUnmountEffect(callback) {\n  return React.useEffect(() => () => callback(), []);\n}\nconst getChildKey = child => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(child => {\n    const key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\nfunction onlyElements(children) {\n  const filtered = [];\n  // We use forEach here instead of map as map mutates the component key by preprending `.$`\n  React.Children.forEach(children, child => {\n    if (React.isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({\n  children,\n  custom,\n  initial = true,\n  onExitComplete,\n  exitBeforeEnter,\n  presenceAffectsLayout = true,\n  mode = \"sync\"\n}) => {\n  indexLegacy.invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n  // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n  const forceRender = React.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n  const isMounted = useIsMounted();\n  // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n  const filteredChildren = onlyElements(children);\n  let childrenToRender = filteredChildren;\n  const exitingChildren = React.useRef(new Map()).current;\n  // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n  const presentChildren = React.useRef(childrenToRender);\n  // A lookup table to quickly reference components by key\n  const allChildren = React.useRef(new Map()).current;\n  // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n  const isInitialRender = React.useRef(true);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(() => {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exitingChildren.clear();\n  });\n  if (isInitialRender.current) {\n    return React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map(child => React__namespace.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      initial: initial ? undefined : false,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child)));\n  }\n  // If this is a subsequent render, deal with entering and exiting children\n  childrenToRender = [...childrenToRender];\n  // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n  const presentKeys = presentChildren.current.map(getChildKey);\n  const targetKeys = filteredChildren.map(getChildKey);\n  // Diff the present children with our target children and mark those that are exiting\n  const numPresent = presentKeys.length;\n  for (let i = 0; i < numPresent; i++) {\n    const key = presentKeys[i];\n    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n      exitingChildren.set(key, undefined);\n    }\n  }\n  // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n  if (mode === \"wait\" && exitingChildren.size) {\n    childrenToRender = [];\n  }\n  // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n  exitingChildren.forEach((component, key) => {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    const child = allChildren.get(key);\n    if (!child) return;\n    const insertionIndex = presentKeys.indexOf(key);\n    let exitingComponent = component;\n    if (!exitingComponent) {\n      const onExit = () => {\n        allChildren.delete(key);\n        exitingChildren.delete(key);\n        // Remove this child from the present children\n        const removeIndex = presentChildren.current.findIndex(presentChild => presentChild.key === key);\n        presentChildren.current.splice(removeIndex, 1);\n        // Defer re-rendering until all exiting children have indeed left\n        if (!exitingChildren.size) {\n          presentChildren.current = filteredChildren;\n          if (isMounted.current === false) return;\n          forceRender();\n          onExitComplete && onExitComplete();\n        }\n      };\n      exitingComponent = React__namespace.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: false,\n        onExitComplete: onExit,\n        custom: custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n      exitingChildren.set(key, exitingComponent);\n    }\n    childrenToRender.splice(insertionIndex, 0, exitingComponent);\n  });\n  // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n  childrenToRender = childrenToRender.map(child => {\n    const key = child.key;\n    return exitingChildren.has(key) ? child : React__namespace.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n  return React__namespace.createElement(React__namespace.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map(child => React.cloneElement(child)));\n};\n\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig({\n  children,\n  isValidProp,\n  ...config\n}) {\n  isValidProp && loadExternalIsValidProp(isValidProp);\n  /**\n   * Inherit props from any parent MotionConfig components\n   */\n  config = {\n    ...React.useContext(MotionConfigContext),\n    ...config\n  };\n  /**\n   * Don't allow isStatic to change between renders as it affects how many hooks\n   * motion components fire.\n   */\n  config.isStatic = useConstant(() => config.isStatic);\n  /**\n   * Creating a new config context object will re-render every `motion` component\n   * every time it renders. So we only want to create a new one sparingly.\n   */\n  const context = React.useMemo(() => config, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);\n  return React__namespace.createElement(MotionConfigContext.Provider, {\n    value: context\n  }, children);\n}\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({\n  children,\n  features,\n  strict = false\n}) {\n  const [, setIsLoaded] = React.useState(!isLazyBundle(features));\n  const loadedRenderer = React.useRef(undefined);\n  /**\n   * If this is a synchronous load, load features immediately\n   */\n  if (!isLazyBundle(features)) {\n    const {\n      renderer,\n      ...loadedFeatures\n    } = features;\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n  React.useEffect(() => {\n    if (isLazyBundle(features)) {\n      features().then(({\n        renderer,\n        ...loadedFeatures\n      }) => {\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return React__namespace.createElement(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict\n    }\n  }, children);\n}\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\n\n/**\n * Note: Still used by components generated by old versions of Framer\n *\n * @deprecated\n */\nconst DeprecatedLayoutGroupContext = React.createContext(null);\nconst shouldInheritGroup = inherit => inherit === true;\nconst shouldInheritId = inherit => shouldInheritGroup(inherit === true) || inherit === \"id\";\nconst LayoutGroup = ({\n  children,\n  id,\n  inherit = true\n}) => {\n  const layoutGroupContext = React.useContext(LayoutGroupContext);\n  const deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n  const [forceRender, key] = useForceUpdate();\n  const context = React.useRef(null);\n  const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n  if (context.current === null) {\n    if (shouldInheritId(inherit) && upstreamId) {\n      id = id ? upstreamId + \"-\" + id : upstreamId;\n    }\n    context.current = {\n      id,\n      group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()\n    };\n  }\n  const memoizedContext = React.useMemo(() => ({\n    ...context.current,\n    forceRender\n  }), [key]);\n  return React__namespace.createElement(LayoutGroupContext.Provider, {\n    value: memoizedContext\n  }, children);\n};\nconst ReorderContext = React.createContext(null);\nfunction checkReorder(order, value, offset, velocity) {\n  if (!velocity) return order;\n  const index = order.findIndex(item => item.value === value);\n  if (index === -1) return order;\n  const nextOffset = velocity > 0 ? 1 : -1;\n  const nextItem = order[index + nextOffset];\n  if (!nextItem) return order;\n  const item = order[index];\n  const nextLayout = nextItem.layout;\n  const nextItemCenter = indexLegacy.mix(nextLayout.min, nextLayout.max, 0.5);\n  if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {\n    return indexLegacy.moveItem(order, index, index + nextOffset);\n  }\n  return order;\n}\nfunction ReorderGroup({\n  children,\n  as = \"ul\",\n  axis = \"y\",\n  onReorder,\n  values,\n  ...props\n}, externalRef) {\n  const Component = useConstant(() => motion(as));\n  const order = [];\n  const isReordering = React.useRef(false);\n  indexLegacy.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  const context = {\n    axis,\n    registerItem: (value, layout) => {\n      /**\n       * Ensure entries can't add themselves more than once\n       */\n      if (layout && order.findIndex(entry => value === entry.value) === -1) {\n        order.push({\n          value,\n          layout: layout[axis]\n        });\n        order.sort(compareMin);\n      }\n    },\n    updateOrder: (id, offset, velocity) => {\n      if (isReordering.current) return;\n      const newOrder = checkReorder(order, id, offset, velocity);\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(value => values.indexOf(value) !== -1));\n      }\n    }\n  };\n  React.useEffect(() => {\n    isReordering.current = false;\n  });\n  return React__namespace.createElement(Component, {\n    ...props,\n    ref: externalRef,\n    ignoreStrict: true\n  }, React__namespace.createElement(ReorderContext.Provider, {\n    value: context\n  }, children));\n}\nconst Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n  return item.value;\n}\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n  const value = useConstant(() => indexLegacy.motionValue(initial));\n  /**\n   * If this motion value is being used in static mode, like on\n   * the Framer canvas, force components to rerender when the motion\n   * value is updated.\n   */\n  const {\n    isStatic\n  } = React.useContext(MotionConfigContext);\n  if (isStatic) {\n    const [, setLatest] = React.useState(initial);\n    React.useEffect(() => value.on(\"change\", setLatest), []);\n  }\n  return value;\n}\nfunction useCombineMotionValues(values, combineValues) {\n  /**\n   * Initialise the returned motion value. This remains the same between renders.\n   */\n  const value = useMotionValue(combineValues());\n  /**\n   * Create a function that will update the template motion value with the latest values.\n   * This is pre-bound so whenever a motion value updates it can schedule its\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\n   * in a single frame.\n   */\n  const updateValue = () => value.set(combineValues());\n  /**\n   * Synchronously update the motion value with the latest values during the render.\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n   */\n  updateValue();\n  /**\n   * Subscribe to all motion values found within the template. Whenever any of them change,\n   * schedule an update.\n   */\n  useIsomorphicLayoutEffect(() => {\n    const scheduleUpdate = () => indexLegacy.frame.update(updateValue, false, true);\n    const subscriptions = values.map(v => v.on(\"change\", scheduleUpdate));\n    return () => {\n      subscriptions.forEach(unsubscribe => unsubscribe());\n      indexLegacy.cancelFrame(updateValue);\n    };\n  });\n  return value;\n}\nfunction useComputed(compute) {\n  /**\n   * Open session of collectMotionValues. Any MotionValue that calls get()\n   * will be saved into this array.\n   */\n  indexLegacy.collectMotionValues.current = [];\n  compute();\n  const value = useCombineMotionValues(indexLegacy.collectMotionValues.current, compute);\n  /**\n   * Synchronously close session of collectMotionValues.\n   */\n  indexLegacy.collectMotionValues.current = undefined;\n  return value;\n}\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n  if (typeof input === \"function\") {\n    return useComputed(input);\n  }\n  const transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : indexLegacy.transform(inputRangeOrTransformer, outputRange, options);\n  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n  const latest = useConstant(() => []);\n  return useCombineMotionValues(values, () => {\n    latest.length = 0;\n    const numValues = values.length;\n    for (let i = 0; i < numValues; i++) {\n      latest[i] = values[i].get();\n    }\n    return transformer(latest);\n  });\n}\nfunction useDefaultMotionValue(value, defaultValue = 0) {\n  return indexLegacy.isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem({\n  children,\n  style = {},\n  value,\n  as = \"li\",\n  onDrag,\n  layout = true,\n  ...props\n}, externalRef) {\n  const Component = useConstant(() => motion(as));\n  const context = React.useContext(ReorderContext);\n  const point = {\n    x: useDefaultMotionValue(style.x),\n    y: useDefaultMotionValue(style.y)\n  };\n  const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : \"unset\");\n  const measuredLayout = React.useRef(null);\n  indexLegacy.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n  const {\n    axis,\n    registerItem,\n    updateOrder\n  } = context;\n  React.useEffect(() => {\n    registerItem(value, measuredLayout.current);\n  }, [context]);\n  return React__namespace.createElement(Component, {\n    drag: axis,\n    ...props,\n    dragSnapToOrigin: true,\n    style: {\n      ...style,\n      x: point.x,\n      y: point.y,\n      zIndex\n    },\n    layout: layout,\n    onDrag: (event, gesturePoint) => {\n      const {\n        velocity\n      } = gesturePoint;\n      velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n      onDrag && onDrag(event, gesturePoint);\n    },\n    onLayoutMeasure: measured => {\n      measuredLayout.current = measured;\n    },\n    ref: externalRef,\n    ignoreStrict: true\n  }, children);\n}\nconst Item = React.forwardRef(ReorderItem);\nconst Reorder = {\n  Group,\n  Item\n};\n\n/**\n * @public\n */\nconst domAnimation = {\n  renderer: createDomVisualElement,\n  ...animations,\n  ...gestureAnimations\n};\n\n/**\n * @public\n */\nconst domMax = {\n  ...domAnimation,\n  ...drag,\n  ...layout\n};\n\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments, ...values) {\n  /**\n   * Create a function that will build a string from the latest motion values.\n   */\n  const numFragments = fragments.length;\n  function buildValue() {\n    let output = ``;\n    for (let i = 0; i < numFragments; i++) {\n      output += fragments[i];\n      const value = values[i];\n      if (value) {\n        output += indexLegacy.isMotionValue(value) ? value.get() : value;\n      }\n    }\n    return output;\n  }\n  return useCombineMotionValues(values.filter(indexLegacy.isMotionValue), buildValue);\n}\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n  const {\n    isStatic\n  } = React.useContext(MotionConfigContext);\n  const activeSpringAnimation = React.useRef(null);\n  const value = useMotionValue(indexLegacy.isMotionValue(source) ? source.get() : source);\n  const stopAnimation = () => {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n  React.useInsertionEffect(() => {\n    return value.attach((v, set) => {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      stopAnimation();\n      activeSpringAnimation.current = indexLegacy.animateValue({\n        keyframes: [value.get(), v],\n        velocity: value.getVelocity(),\n        type: \"spring\",\n        restDelta: 0.001,\n        restSpeed: 0.01,\n        ...config,\n        onUpdate: set\n      });\n      /**\n       * If we're between frames, resync the animation to the frameloop.\n       */\n      if (!indexLegacy.frameData.isProcessing) {\n        const delta = performance.now() - indexLegacy.frameData.timestamp;\n        if (delta < 30) {\n          activeSpringAnimation.current.time = indexLegacy.millisecondsToSeconds(delta);\n        }\n      }\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(() => {\n    if (indexLegacy.isMotionValue(source)) {\n      return source.on(\"change\", v => value.set(parseFloat(v)));\n    }\n  }, [value]);\n  return value;\n}\nfunction useMotionValueEvent(value, event, callback) {\n  /**\n   * useInsertionEffect will create subscriptions before any other\n   * effects will run. Effects run upwards through the tree so it\n   * can be that binding a useLayoutEffect higher up the tree can\n   * miss changes from lower down the tree.\n   */\n  React.useInsertionEffect(() => value.on(event, callback), [value, event, callback]);\n}\n\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */\nfunction useVelocity(value) {\n  const velocity = useMotionValue(value.getVelocity());\n  useMotionValueEvent(value, \"velocityChange\", newVelocity => {\n    velocity.set(newVelocity);\n  });\n  return velocity;\n}\nfunction refWarning(name, ref) {\n  indexLegacy.warning(Boolean(!ref || ref.current), `You have defined a ${name} options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its \\`layoutEffect: false\\` option.`);\n}\nconst createScrollMotionValues = () => ({\n  scrollX: indexLegacy.motionValue(0),\n  scrollY: indexLegacy.motionValue(0),\n  scrollXProgress: indexLegacy.motionValue(0),\n  scrollYProgress: indexLegacy.motionValue(0)\n});\nfunction useScroll({\n  container,\n  target,\n  layoutEffect = true,\n  ...options\n} = {}) {\n  const values = useConstant(createScrollMotionValues);\n  const useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : React.useEffect;\n  useLifecycleEffect(() => {\n    refWarning(\"target\", target);\n    refWarning(\"container\", container);\n    return indexLegacy.scrollInfo(({\n      x,\n      y\n    }) => {\n      values.scrollX.set(x.current);\n      values.scrollXProgress.set(x.progress);\n      values.scrollY.set(y.current);\n      values.scrollYProgress.set(y.progress);\n    }, {\n      ...options,\n      container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n      target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n    });\n  }, [container, target, JSON.stringify(options.offset)]);\n  return values;\n}\n\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */\nfunction useElementScroll(ref) {\n  if (process.env.NODE_ENV === \"development\") {\n    indexLegacy.warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n  }\n  return useScroll({\n    container: ref\n  });\n}\n\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */\nfunction useViewportScroll() {\n  if (process.env.NODE_ENV !== \"production\") {\n    indexLegacy.warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n  }\n  return useScroll();\n}\nfunction useAnimationFrame(callback) {\n  const initialTimestamp = React.useRef(0);\n  const {\n    isStatic\n  } = React.useContext(MotionConfigContext);\n  React.useEffect(() => {\n    if (isStatic) return;\n    const provideTimeSinceStart = ({\n      timestamp,\n      delta\n    }) => {\n      if (!initialTimestamp.current) initialTimestamp.current = timestamp;\n      callback(timestamp - initialTimestamp.current, delta);\n    };\n    indexLegacy.frame.update(provideTimeSinceStart, true);\n    return () => indexLegacy.cancelFrame(provideTimeSinceStart);\n  }, [callback]);\n}\nfunction useTime() {\n  const time = useMotionValue(0);\n  useAnimationFrame(t => time.set(t));\n  return time;\n}\nclass WillChangeMotionValue extends indexLegacy.MotionValue {\n  constructor() {\n    super(...arguments);\n    this.members = [];\n    this.transforms = new Set();\n  }\n  add(name) {\n    let memberName;\n    if (indexLegacy.transformProps.has(name)) {\n      this.transforms.add(name);\n      memberName = \"transform\";\n    } else if (!name.startsWith(\"origin\") && !indexLegacy.isCSSVariableName(name) && name !== \"willChange\") {\n      memberName = indexLegacy.camelToDash(name);\n    }\n    if (memberName) {\n      indexLegacy.addUniqueItem(this.members, memberName);\n      this.update();\n    }\n  }\n  remove(name) {\n    if (indexLegacy.transformProps.has(name)) {\n      this.transforms.delete(name);\n      if (!this.transforms.size) {\n        indexLegacy.removeItem(this.members, \"transform\");\n      }\n    } else {\n      indexLegacy.removeItem(this.members, indexLegacy.camelToDash(name));\n    }\n    this.update();\n  }\n  update() {\n    this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n  }\n}\nfunction useWillChange() {\n  return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !indexLegacy.hasReducedMotionListener.current && indexLegacy.initPrefersReducedMotion();\n  const [shouldReduceMotion] = React.useState(indexLegacy.prefersReducedMotion.current);\n  if (process.env.NODE_ENV !== \"production\") {\n    indexLegacy.warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n  }\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n  return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n  const reducedMotionPreference = useReducedMotion();\n  const {\n    reducedMotion\n  } = React.useContext(MotionConfigContext);\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(value => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n  /**\n   * Track whether the host component has mounted.\n   */\n  let hasMounted = false;\n  /**\n   * A collection of linked component animation controls.\n   */\n  const subscribers = new Set();\n  const controls = {\n    subscribe(visualElement) {\n      subscribers.add(visualElement);\n      return () => void subscribers.delete(visualElement);\n    },\n    start(definition, transitionOverride) {\n      indexLegacy.invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      const animations = [];\n      subscribers.forEach(visualElement => {\n        animations.push(animateVisualElement(visualElement, definition, {\n          transitionOverride\n        }));\n      });\n      return Promise.all(animations);\n    },\n    set(definition) {\n      indexLegacy.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      return subscribers.forEach(visualElement => {\n        indexLegacy.setValues(visualElement, definition);\n      });\n    },\n    stop() {\n      subscribers.forEach(visualElement => {\n        stopAnimation(visualElement);\n      });\n    },\n    mount() {\n      hasMounted = true;\n      return () => {\n        hasMounted = false;\n        controls.stop();\n      };\n    }\n  };\n  return controls;\n}\nfunction useAnimate() {\n  const scope = useConstant(() => ({\n    current: null,\n    animations: []\n  }));\n  const animate = useConstant(() => indexLegacy.createScopedAnimate(scope));\n  useUnmountEffect(() => {\n    scope.animations.forEach(animation => animation.stop());\n  });\n  return [scope, animate];\n}\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n  const controls = useConstant(animationControls);\n  useIsomorphicLayoutEffect(controls.mount, []);\n  return controls;\n}\nconst useAnimation = useAnimationControls;\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle(...items) {\n  const index = React.useRef(0);\n  const [item, setItem] = React.useState(items[index.current]);\n  const runCycle = React.useCallback(next => {\n    index.current = typeof next !== \"number\" ? indexLegacy.wrap(0, items.length, index.current + 1) : next;\n    setItem(items[index.current]);\n  },\n  // The array will change on each call, but by putting items.length at\n  // the front of this array, we guarantee the dependency comparison will match up\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [items.length, ...items]);\n  return [item, runCycle];\n}\nfunction useInView(ref, {\n  root,\n  margin,\n  amount,\n  once = false\n} = {}) {\n  const [isInView, setInView] = React.useState(false);\n  React.useEffect(() => {\n    if (!ref.current || once && isInView) return;\n    const onEnter = () => {\n      setInView(true);\n      return once ? undefined : () => setInView(false);\n    };\n    const options = {\n      root: root && root.current || undefined,\n      margin,\n      amount\n    };\n    return indexLegacy.inView(ref.current, onEnter, options);\n  }, [root, ref, margin, once]);\n  return isInView;\n}\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nclass DragControls {\n  constructor() {\n    this.componentControls = new Set();\n  }\n  /**\n   * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n   *\n   * @internal\n   */\n  subscribe(controls) {\n    this.componentControls.add(controls);\n    return () => this.componentControls.delete(controls);\n  }\n  /**\n   * Start a drag gesture on every `motion` component that has this set of drag controls\n   * passed into it via the `dragControls` prop.\n   *\n   * ```jsx\n   * dragControls.start(e, {\n   *   snapToCursor: true\n   * })\n   * ```\n   *\n   * @param event - PointerEvent\n   * @param options - Options\n   *\n   * @public\n   */\n  start(event, options) {\n    this.componentControls.forEach(controls => {\n      controls.start(event.nativeEvent || event, options);\n    });\n  }\n}\nconst createDragControls = () => new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n  return useConstant(createDragControls);\n}\n\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n  React.useEffect(() => {\n    const element = ref.current;\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\n/**\n * Checks if a component is a `motion` component.\n */\nfunction isMotionComponent(component) {\n  return component !== null && typeof component === \"object\" && motionComponentSymbol in component;\n}\n\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */\nfunction unwrapMotionComponent(component) {\n  if (isMotionComponent(component)) {\n    return component[motionComponentSymbol];\n  }\n  return undefined;\n}\nfunction useInstantLayoutTransition() {\n  return startTransition;\n}\nfunction startTransition(callback) {\n  if (!rootProjectionNode.current) return;\n  rootProjectionNode.current.isUpdating = false;\n  rootProjectionNode.current.blockUpdate();\n  callback && callback();\n}\nfunction useInstantTransition() {\n  const [forceUpdate, forcedRenderCount] = useForceUpdate();\n  const startInstantLayoutTransition = useInstantLayoutTransition();\n  const unlockOnFrameRef = React.useRef();\n  React.useEffect(() => {\n    /**\n     * Unblock after two animation frames, otherwise this will unblock too soon.\n     */\n    indexLegacy.frame.postRender(() => indexLegacy.frame.postRender(() => {\n      /**\n       * If the callback has been called again after the effect\n       * triggered this 2 frame delay, don't unblock animations. This\n       * prevents the previous effect from unblocking the current\n       * instant transition too soon. This becomes more likely when\n       * used in conjunction with React.startTransition().\n       */\n      if (forcedRenderCount !== unlockOnFrameRef.current) return;\n      indexLegacy.instantAnimationState.current = false;\n    }));\n  }, [forcedRenderCount]);\n  return callback => {\n    startInstantLayoutTransition(() => {\n      indexLegacy.instantAnimationState.current = true;\n      forceUpdate();\n      callback();\n      unlockOnFrameRef.current = forcedRenderCount + 1;\n    });\n  };\n}\nfunction useResetProjection() {\n  const reset = React__namespace.useCallback(() => {\n    const root = rootProjectionNode.current;\n    if (!root) return;\n    root.resetTree();\n  }, []);\n  return reset;\n}\nconst appearStoreId = (id, value) => `${id}: ${value}`;\nconst appearAnimationStore = new Map();\nfunction handoffOptimizedAppearAnimation(id, name,\n/**\n * Legacy argument. This function is inlined apart from framer-motion so\n * will co-ordinate with Shuang with how best to remove this.\n */\n_value,\n/**\n * This function is loaded via window by startOptimisedAnimation.\n * By accepting `sync` as an argument, rather than using it via\n * import, it can be kept out of the first-load Framer bundle,\n * while also allowing this function to not be included in\n * Framer Motion bundles where it's not needed.\n */\nframe) {\n  const storeId = appearStoreId(id, indexLegacy.transformProps.has(name) ? \"transform\" : name);\n  const appearAnimation = appearAnimationStore.get(storeId);\n  if (!appearAnimation) return 0;\n  const {\n    animation,\n    startTime\n  } = appearAnimation;\n  const cancelOptimisedAnimation = () => {\n    appearAnimationStore.delete(storeId);\n    /**\n     * Animation.cancel() throws so it needs to be wrapped in a try/catch\n     */\n    try {\n      animation.cancel();\n    } catch (e) {}\n  };\n  if (startTime !== null) {\n    /**\n     * We allow the animation to persist until the next frame:\n     *   1. So it continues to play until Framer Motion is ready to render\n     *      (avoiding a potential flash of the element's original state)\n     *   2. As all independent transforms share a single transform animation, stopping\n     *      it synchronously would prevent subsequent transforms from handing off.\n     */\n    frame.render(cancelOptimisedAnimation);\n    /**\n     * We use main thread timings vs those returned by Animation.currentTime as it\n     * can be the case, particularly in Firefox, that currentTime doesn't return\n     * an updated value for several frames, even as the animation plays smoothly via\n     * the GPU.\n     */\n    return performance.now() - startTime || 0;\n  } else {\n    cancelOptimisedAnimation();\n    return 0;\n  }\n}\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n  const id = element.dataset[indexLegacy.optimizedAppearDataId];\n  if (!id) return;\n  window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n  const storeId = appearStoreId(id, name);\n  /**\n   * Use a dummy animation to detect when Chrome is ready to start\n   * painting the page and hold off from triggering the real animation\n   * until then.\n   *\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n   */\n  const readyAnimation = indexLegacy.animateStyle(element, name, [keyframes[0], keyframes[0]],\n  /**\n   * 10 secs is basically just a super-safe duration to give Chrome\n   * long enough to get the animation ready.\n   */\n  {\n    duration: 10000,\n    ease: \"linear\"\n  });\n  appearAnimationStore.set(storeId, {\n    animation: readyAnimation,\n    startTime: null\n  });\n  const startAnimation = () => {\n    readyAnimation.cancel();\n    const appearAnimation = indexLegacy.animateStyle(element, name, keyframes, options);\n    if (document.timeline) {\n      appearAnimation.startTime = document.timeline.currentTime;\n    }\n    appearAnimationStore.set(storeId, {\n      animation: appearAnimation,\n      startTime: performance.now()\n    });\n    if (onReady) onReady(appearAnimation);\n  };\n  if (readyAnimation.ready) {\n    readyAnimation.ready.then(startAnimation).catch(indexLegacy.noop);\n  } else {\n    startAnimation();\n  }\n}\nconst createObject = () => ({});\nclass StateVisualElement extends indexLegacy.VisualElement {\n  build() {}\n  measureInstanceViewportBox() {\n    return indexLegacy.createBox();\n  }\n  resetTransform() {}\n  restoreTransform() {}\n  removeValueFromRenderState() {}\n  renderInstance() {}\n  scrapeMotionValuesFromProps() {\n    return createObject();\n  }\n  getBaseTargetFromProps() {\n    return undefined;\n  }\n  readValueFromInstance(_state, key, options) {\n    return options.initialState[key] || 0;\n  }\n  sortInstanceNodePosition() {\n    return 0;\n  }\n  makeTargetAnimatableFromInstance({\n    transition,\n    transitionEnd,\n    ...target\n  }) {\n    const origin = indexLegacy.getOrigin(target, transition || {}, this);\n    indexLegacy.checkTargetForNewValues(this, target, origin);\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  }\n}\nconst useVisualState = makeUseVisualState({\n  scrapeMotionValuesFromProps: createObject,\n  createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\nfunction useAnimatedState(initialState) {\n  const [animationState, setAnimationState] = React.useState(initialState);\n  const visualState = useVisualState({}, false);\n  const element = useConstant(() => {\n    return new StateVisualElement({\n      props: {},\n      visualState,\n      presenceContext: null\n    }, {\n      initialState\n    });\n  });\n  React.useEffect(() => {\n    element.mount({});\n    return () => element.unmount();\n  }, [element]);\n  React.useEffect(() => {\n    element.update({\n      onUpdate: v => {\n        setAnimationState({\n          ...v\n        });\n      }\n    }, null);\n  }, [setAnimationState, element]);\n  const startAnimation = useConstant(() => animationDefinition => {\n    return animateVisualElement(element, animationDefinition);\n  });\n  return [animationState, startAnimation];\n}\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = scale => scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n  let parentScaleX = useMotionValue(1);\n  let parentScaleY = useMotionValue(1);\n  const {\n    visualElement\n  } = React.useContext(MotionContext);\n  indexLegacy.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  indexLegacy.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n  const scaleX = useTransform(parentScaleX, invertScale);\n  const scaleY = useTransform(parentScaleY, invertScale);\n  return {\n    scaleX,\n    scaleY\n  };\n}\nlet id = 0;\nconst AnimateSharedLayout = ({\n  children\n}) => {\n  React__namespace.useEffect(() => {\n    indexLegacy.invariant(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n  }, []);\n  return React__namespace.createElement(LayoutGroup, {\n    id: useConstant(() => `asl-${id++}`)\n  }, children);\n};\nexports.MotionValue = indexLegacy.MotionValue;\nexports.VisualElement = indexLegacy.VisualElement;\nexports.addScaleCorrector = indexLegacy.addScaleCorrector;\nexports.animate = indexLegacy.animate;\nexports.animateValue = indexLegacy.animateValue;\nexports.anticipate = indexLegacy.anticipate;\nexports.backIn = indexLegacy.backIn;\nexports.backInOut = indexLegacy.backInOut;\nexports.backOut = indexLegacy.backOut;\nexports.buildTransform = indexLegacy.buildTransform;\nexports.cancelFrame = indexLegacy.cancelFrame;\nexports.cancelSync = indexLegacy.cancelSync;\nexports.checkTargetForNewValues = indexLegacy.checkTargetForNewValues;\nexports.circIn = indexLegacy.circIn;\nexports.circInOut = indexLegacy.circInOut;\nexports.circOut = indexLegacy.circOut;\nexports.clamp = indexLegacy.clamp;\nexports.color = indexLegacy.color;\nexports.complex = indexLegacy.complex;\nexports.createBox = indexLegacy.createBox;\nexports.createScopedAnimate = indexLegacy.createScopedAnimate;\nexports.cubicBezier = indexLegacy.cubicBezier;\nexports.delay = indexLegacy.delay;\nexports.distance = indexLegacy.distance;\nexports.distance2D = indexLegacy.distance2D;\nexports.easeIn = indexLegacy.easeIn;\nexports.easeInOut = indexLegacy.easeInOut;\nexports.easeOut = indexLegacy.easeOut;\nexports.frame = indexLegacy.frame;\nexports.frameData = indexLegacy.frameData;\nexports.inView = indexLegacy.inView;\nexports.interpolate = indexLegacy.interpolate;\nObject.defineProperty(exports, 'invariant', {\n  enumerable: true,\n  get: function () {\n    return indexLegacy.invariant;\n  }\n});\nexports.isBrowser = indexLegacy.isBrowser;\nexports.isMotionValue = indexLegacy.isMotionValue;\nexports.mirrorEasing = indexLegacy.mirrorEasing;\nexports.mix = indexLegacy.mix;\nexports.motionValue = indexLegacy.motionValue;\nexports.optimizedAppearDataAttribute = indexLegacy.optimizedAppearDataAttribute;\nexports.pipe = indexLegacy.pipe;\nexports.progress = indexLegacy.progress;\nexports.px = indexLegacy.px;\nexports.reverseEasing = indexLegacy.reverseEasing;\nexports.scroll = indexLegacy.scroll;\nexports.scrollInfo = indexLegacy.scrollInfo;\nexports.spring = indexLegacy.spring;\nexports.stagger = indexLegacy.stagger;\nexports.steps = indexLegacy.steps;\nexports.sync = indexLegacy.sync;\nexports.transform = indexLegacy.transform;\nexports.visualElementStore = indexLegacy.visualElementStore;\nObject.defineProperty(exports, 'warning', {\n  enumerable: true,\n  get: function () {\n    return indexLegacy.warning;\n  }\n});\nexports.wrap = indexLegacy.wrap;\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.addPointerEvent = addPointerEvent;\nexports.addPointerInfo = addPointerInfo;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.calcLength = calcLength;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isDragActive = isDragActive;\nexports.isMotionComponent = isMotionComponent;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.motion = motion;\nexports.resolveMotionValue = resolveMotionValue;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimate = useAnimate;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.useMotionValueEvent = useMotionValueEvent;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useWillChange = useWillChange;","map":{"version":3,"names":["Object","defineProperty","exports","value","React","require","indexLegacy","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","React__namespace","React__default","MotionConfigContext","createContext","transformPagePoint","p","isStatic","reducedMotion","MotionContext","PresenceContext","useIsomorphicLayoutEffect","isBrowser","useLayoutEffect","useEffect","LazyContext","strict","useVisualElement","Component","visualState","props","createVisualElement","visualElement","parent","useContext","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","useRef","renderer","current","blockInitialAnimation","initial","useInsertionEffect","update","canHandoff","Boolean","window","HandoffAppearAnimations","render","animationState","animateChanges","updateFeatures","undefined","useMotionRef","externalRef","useCallback","instance","mount","unmount","isRefObject","getCurrentTreeVariants","context","isControllingVariants","animate","isVariantLabel","inherit","useCreateMotionContext","useMemo","variantLabelsAsDependency","prop","Array","isArray","join","loadFeatures","features","key","featureDefinitions","LayoutGroupContext","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","createMotionComponent","preloadedFeatures","useRender","useVisualState","MotionComponent","MeasureLayout","configAndProps","layoutId","useLayoutId","initialLayoutGroupConfig","isStrict","createElement","Provider","ForwardRefComponent","forwardRef","layoutGroupId","id","createMotionProxy","createConfig","custom","customMotionComponentConfig","Proxy","componentCache","Map","_target","has","set","lowercaseSVGElements","isSVGComponent","includes","indexOf","test","createHtmlRenderState","style","transform","transformOrigin","vars","copyRawValuesOnly","target","source","isMotionValue","isForcedMotionValue","useInitialMotionValues","transformTemplate","state","buildHTMLStyles","enableHardwareAcceleration","assign","useStyle","styleProp","transformValues","useHTMLProps","htmlProps","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","loadExternalIsValidProp","isValidProp","default","_a","filterProps","isDom","forwardMotionProps","filteredProps","values","createSvgRenderState","attrs","useSVGProps","_isStatic","visualProps","buildSVGAttrs","isSVGTag","rawStyles","createUseRender","ref","latestValues","useVisualProps","elementProps","children","renderedChildren","useConstant","init","resolveMotionValue","unwrappedValue","isCustomValue","toValue","makeState","scrapeMotionValuesFromProps","createRenderState","onMount","makeLatestValues","renderState","makeUseVisualState","config","make","scrapeMotionValues","motionValues","isVariantNode","isInitialAnimationBlocked","variantToSet","isAnimationControls","list","definition","resolved","resolveVariantFromProps","transitionEnd","transition","valueTarget","index","length","svgMotionConfig","frame","read","dimensions","getBBox","getBoundingClientRect","x","y","width","height","tagName","renderSVG","htmlMotionConfig","scrapeMotionValuesFromProps$1","createDomMotionConfig","baseConfig","addDomEvent","eventName","handler","options","passive","addEventListener","removeEventListener","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","createLock","name","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","constructor","node","isMounted","addHoverEvent","isActive","callbackName","handleEvent","info","type","getProps","whileHover","setActive","HoverGesture","pipe","FocusGesture","arguments","onFocus","isFocusVisible","matches","onBlur","isNodeOrChild","child","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","noop","removeEndListeners","removeAccessibleListeners","startPointerPress","startEvent","startInfo","isPressing","endPointerPress","endEvent","endInfo","checkPressEnd","onTapCancel","removePointerUpListener","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","handleKeydown","keydownEvent","handleKeyup","keyupEvent","removeKeydownListener","handleBlur","removeBlurListener","removePointerListener","removeFocusListener","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","callback","fireAllObserverCallbacks","entries","initIntersectionObserver","root","lookupRoot","document","rootObservers","JSON","stringify","IntersectionObserver","observeIntersection","element","rootInteresectionObserver","observe","delete","unobserve","thresholdNames","some","all","InViewFeature","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","onIntersectionUpdate","isIntersecting","onViewportEnter","onViewportLeave","prevProps","hasOptionsChanged","hasViewportOptionChanged","prevViewport","gestureAnimations","inView","tap","focus","hover","shallowCompare","next","prev","prevLength","i","animateVariant","variant","resolveVariant","getDefaultTransition","transitionOverride","getAnimation","Promise","animateTarget","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","when","first","last","then","delay","animations","maxStaggerDuration","generateStaggerDuration","from","sort","sortByTreeOrder","notify","push","a","b","sortNodePosition","animateVisualElement","animation","map","resolvedDefinition","reversePriorityOrder","variantPriorityOrder","reverse","numAnimationTypes","animateList","createAnimationState","createState","isInitialRender","buildResolvedTypeValues","acc","setAnimateFunction","makeAnimator","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","needsAnimating","hasOwnProperty","isKeyframesTarget","add","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","getState","createTypeState","whileInView","whileDrag","whileFocus","exit","AnimationFeature","updateAnimationControlsSubscription","subscribe","prevAnimate","id$2","ExitAnimationFeature","isPresent","onExitComplete","prevIsPresent","prevPresenceContext","exitAnimation","register","PanSession","handlers","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","offset","timestamp","frameData","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","cancelFrame","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","timestampedPoint","lastPoint","secondsToMilliseconds","time","millisecondsToSeconds","currentVelocity","calcLength","axis","max","min","isNear","maxDistance","Math","abs","calcAxisDelta","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","calcRelativeBox","calcRelativeAxisPosition","layout","calcRelativePosition","applyConstraints","elastic","calcRelativeAxisConstraints","calcRelativeConstraints","layoutBox","top","left","bottom","right","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcOrigin","sourceLength","targetLength","progress","clamp","rebaseAxisConstraints","constraints","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label","eachAxis","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","hasMutatedConstraints","createBox","start","originEvent","snapToCursor","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","parseFloat","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","updateAxis","stop","panSession","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","dragConstraints","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","invariant","measurePageBox","measuredConstraints","userConstraints","convertBoxToBoundingBox","convertBoundingBoxToBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","animateMotionValue","dragKey","toUpperCase","externalMotionValue","getValue","scalePositionWithinConstraints","boxProgress","latest","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","direction","lockThreshold","DragGesture","removeGroupControls","controls","dragControls","asyncHandler","PanGesture","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","borders","numBorders","asNumber","isPx","px","mixValues","follow","lead","shouldCrossfadeOpacity","isOnlyMember","opacity","easeCrossfadeIn","opacityExit","easeCrossfadeOut","borderLabel","followRadius","getRadius","leadRadius","canMix","rotate","radiusName","borderRadius","compress","circOut","easing","copyAxisInto","originAxis","copyBoxInto","box","originBox","removePointDelta","boxScale","scalePoint","removeAxisDelta","sourceAxis","relativeProgress","removeAxisTransforms","transforms","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","boxEqualsRounded","round","aspectRatio","NodeStack","members","addUniqueItem","scheduleRender","remove","removeItem","prevLead","promote","relegate","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","treeScale","latestTransform","xTranslate","yTranslate","rotateX","rotateY","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","isDirty","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","record","data","MotionDebug","transformAxes","animationTarget","id$1","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","path","SubscriptionManager","notifyListeners","args","subscriptionManager","hasListeners","isSVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","currentAnimation","setAnimationOrigin","animationOptions","getValueTransition","onPlay","onComplete","shouldReduceMotion","isLead","willUpdate","stack","getStack","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","now","performance","isProcessing","steps","process","preRender","didUpdate","queueMicrotask","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","phase","needsMeasurement","layoutScroll","scroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","hasTransform","removeTransform","pageBox","removeElementScroll","roundBox","measuredBox","measureViewportBox","translateAxis","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","transformBox","boxWithoutTransform","hasScale","nodeBox","setTargetDelta","targetDelta","setOptions","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","applyBoxDelta","has2DTranslate","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","projectionTransform","createDelta","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","mixAxisDelta","mixBox","animateSingleValue","onUpdate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","_b","styles","visibility","pointerEvents","emptyStyles","valuesToRender","scaleCorrectors","correct","applyTo","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","output","mixAxis","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","roundPoint","roundAxis","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","rootProjectionNode","HTMLProjectionNode","documentNode","getComputedStyle","position","nodeGroup","subscriptions","dirtyAll","unsubscribe","dirty","pixelsToPercent","pixels","correctBorderRadius","correctBoxShadow","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","usePresence","useId","safeToRemove","useIsPresent","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","addScaleCorrector","defaultScaleCorrectors","group","getSnapshotBeforeUpdate","layoutDependency","componentDidUpdate","componentWillUnmount","promoteContext","deregister","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","pan","createDomVisualElement","SVGVisualElement","HTMLVisualElement","motion","createDomMotionComponent","m","useIsMounted","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","forceRender","deferredForceRender","PopChildMeasure","childRef","sizeRef","offsetHeight","offsetWidth","offsetTop","offsetLeft","PopChild","dataset","motionPopId","head","appendChild","sheet","insertRule","removeChild","cloneElement","PresenceChild","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","childId","isComplete","_","useUnmountEffect","getChildKey","updateChildLookup","allChildren","onlyElements","filtered","Children","isValidElement","AnimatePresence","exitBeforeEnter","filteredChildren","childrenToRender","exitingChildren","presentChildren","Fragment","presentKeys","targetKeys","numPresent","component","insertionIndex","exitingComponent","onExit","removeIndex","presentChild","splice","env","NODE_ENV","console","warn","MotionConfig","LazyMotion","setIsLoaded","isLazyBundle","loadedRenderer","loadedFeatures","DeprecatedLayoutGroupContext","shouldInheritGroup","shouldInheritId","LayoutGroup","layoutGroupContext","deprecatedLayoutGroupContext","upstreamId","memoizedContext","ReorderContext","checkReorder","order","item","nextOffset","nextItem","nextLayout","nextItemCenter","moveItem","ReorderGroup","as","onReorder","isReordering","registerItem","compareMin","updateOrder","newOrder","filter","ignoreStrict","Group","useMotionValue","setLatest","on","useCombineMotionValues","combineValues","updateValue","scheduleUpdate","v","useComputed","compute","collectMotionValues","useTransform","input","inputRangeOrTransformer","outputRange","transformer","useListTransform","numValues","useDefaultMotionValue","defaultValue","ReorderItem","zIndex","latestX","latestY","gesturePoint","onLayoutMeasure","measured","Item","Reorder","domAnimation","domMax","useMotionTemplate","fragments","numFragments","buildValue","useSpring","activeSpringAnimation","attach","animateValue","keyframes","useMotionValueEvent","useVelocity","newVelocity","refWarning","warning","createScrollMotionValues","scrollX","scrollY","scrollXProgress","scrollYProgress","useScroll","container","layoutEffect","useLifecycleEffect","scrollInfo","useElementScroll","warnOnce","useViewportScroll","useAnimationFrame","initialTimestamp","provideTimeSinceStart","useTime","t","WillChangeMotionValue","MotionValue","memberName","transformProps","isCSSVariableName","camelToDash","useWillChange","useReducedMotion","hasReducedMotionListener","initPrefersReducedMotion","prefersReducedMotion","useReducedMotionConfig","reducedMotionPreference","animationControls","hasMounted","subscribers","setValues","useAnimate","scope","createScopedAnimate","useAnimationControls","useAnimation","useCycle","items","setItem","runCycle","wrap","useInView","setInView","onEnter","DragControls","componentControls","nativeEvent","createDragControls","useDragControls","useDomEvent","isMotionComponent","unwrapMotionComponent","useInstantLayoutTransition","startTransition","useInstantTransition","forceUpdate","startInstantLayoutTransition","unlockOnFrameRef","instantAnimationState","useResetProjection","reset","appearStoreId","appearAnimationStore","handoffOptimizedAppearAnimation","_value","storeId","appearAnimation","startTime","cancelOptimisedAnimation","startOptimizedAppearAnimation","onReady","optimizedAppearDataId","readyAnimation","animateStyle","timeline","currentTime","ready","catch","createObject","StateVisualElement","VisualElement","build","measureInstanceViewportBox","restoreTransform","removeValueFromRenderState","renderInstance","getBaseTargetFromProps","readValueFromInstance","_state","initialState","sortInstanceNodePosition","makeTargetAnimatableFromInstance","getOrigin","checkTargetForNewValues","useAnimatedState","setAnimationState","animationDefinition","maxScale","invertScale","hasWarned","useInvertedScale","parentScaleX","parentScaleY","scaleX","scaleY","AnimateSharedLayout","anticipate","backIn","backInOut","backOut","buildTransform","cancelSync","circIn","circInOut","color","cubicBezier","distance","easeIn","easeInOut","easeOut","interpolate","mirrorEasing","optimizedAppearDataAttribute","reverseEasing","spring","stagger","sync","visualElementStore","useDeprecatedAnimatedState","useDeprecatedInvertedScale"],"sources":["W:/xampp/htdocs/movie-website/frontend/node_modules/framer-motion/dist/cjs/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nvar indexLegacy = require('./index-legacy-eb8b4696.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * @public\n */\nconst MotionConfigContext = React.createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nconst MotionContext = React.createContext({});\n\n/**\n * @public\n */\nconst PresenceContext = React.createContext(null);\n\nconst useIsomorphicLayoutEffect = indexLegacy.isBrowser ? React.useLayoutEffect : React.useEffect;\n\nconst LazyContext = React.createContext({ strict: false });\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = React.useContext(MotionContext);\n    const lazyContext = React.useContext(LazyContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = React.useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    React.useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const canHandoff = React.useRef(Boolean(window.HandoffAppearAnimations));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (canHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    React.useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!canHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        /**\n         * Once we've handed off animations we can delete HandoffAppearAnimations\n         * so components added after the initial render can animate changes\n         * in useEffect vs useLayoutEffect.\n         */\n        window.HandoffAppearAnimations = undefined;\n        canHandoff.current = false;\n    });\n    return visualElement;\n}\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return React.useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (indexLegacy.isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nfunction getCurrentTreeVariants(props, context) {\n    if (indexLegacy.isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || indexLegacy.isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: indexLegacy.isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, React.useContext(MotionContext));\n    return React.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        indexLegacy.featureDefinitions[key] = {\n            ...indexLegacy.featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nconst LayoutGroupContext = React.createContext({});\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = React.createContext({});\n\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...React.useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && indexLegacy.isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n            const isStrict = React.useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React__namespace.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React__namespace.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = React.forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = React.useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nconst createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!indexLegacy.isMotionValue(source[key]) && !indexLegacy.isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return React.useMemo(() => {\n        const state = createHtmlRenderState();\n        indexLegacy.buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = React.useMemo(() => {\n        const state = createSvgRenderState();\n        indexLegacy.buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, indexLegacy.isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = React.useMemo(() => (indexLegacy.isMotionValue(children) ? children.get() : children), [children]);\n        return React.createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = React.useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = indexLegacy.isMotionValue(value) ? value.get() : value;\n    return indexLegacy.isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = React.useContext(MotionContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants = indexLegacy.isControllingVariants(props);\n    const isVariantNode = indexLegacy.isVariantNode(props);\n    if (context &&\n        isVariantNode &&\n        !isControllingVariants &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !indexLegacy.isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = indexLegacy.resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            indexLegacy.frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            indexLegacy.frame.render(() => {\n                indexLegacy.buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, indexLegacy.isSVGTag(instance.tagName), props.transformTemplate);\n                indexLegacy.renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps$1,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nfunction addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nconst isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nfunction createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nclass Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            indexLegacy.frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = indexLegacy.pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = indexLegacy.pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = indexLegacy.noop;\n        this.removeEndListeners = indexLegacy.noop;\n        this.removeAccessibleListeners = indexLegacy.noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                indexLegacy.frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = indexLegacy.pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            indexLegacy.frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = indexLegacy.pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            indexLegacy.frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            indexLegacy.frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = indexLegacy.pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = indexLegacy.resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(indexLegacy.animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? indexLegacy.resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(indexLegacy.animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nconst reversePriorityOrder = [...indexLegacy.variantPriorityOrder].reverse();\nconst numAnimationTypes = indexLegacy.variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = indexLegacy.resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = indexLegacy.isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                indexLegacy.isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (indexLegacy.isKeyframesTarget(next) && indexLegacy.isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (indexLegacy.isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nlet id$2 = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id$2++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = indexLegacy.distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = indexLegacy.frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            indexLegacy.frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = indexLegacy.frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = indexLegacy.pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        indexLegacy.cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            indexLegacy.secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = indexLegacy.millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = indexLegacy.mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        indexLegacy.mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? indexLegacy.mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? indexLegacy.mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = indexLegacy.progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = indexLegacy.progress(source.min, source.max - targetLength, target.min);\n    }\n    return indexLegacy.clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nfunction eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = indexLegacy.createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (indexLegacy.percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                indexLegacy.frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            indexLegacy.frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && indexLegacy.isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !indexLegacy.isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        indexLegacy.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = indexLegacy.measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(indexLegacy.convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = indexLegacy.convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(indexLegacy.animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - indexLegacy.mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!indexLegacy.isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(indexLegacy.mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (indexLegacy.isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = indexLegacy.noop;\n        this.removeListeners = indexLegacy.noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || indexLegacy.noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        indexLegacy.frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = indexLegacy.noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    indexLegacy.frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || indexLegacy.px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = indexLegacy.mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(indexLegacy.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (indexLegacy.percent.test(leadRadius) || indexLegacy.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = indexLegacy.mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, indexLegacy.circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, indexLegacy.noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(indexLegacy.progress(min, max, p));\n    };\n}\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = indexLegacy.scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = indexLegacy.scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (indexLegacy.percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = indexLegacy.mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = indexLegacy.mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        indexLegacy.addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        indexLegacy.removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nconst compareByDepth = (a, b) => a.depth - b.depth;\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        indexLegacy.addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        indexLegacy.removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nfunction record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id$1 = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id$1++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new indexLegacy.SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = indexLegacy.isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = indexLegacy.delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...indexLegacy.getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            indexLegacy.cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            indexLegacy.frameData.delta = indexLegacy.clamp(0, 1000 / 60, now - indexLegacy.frameData.timestamp);\n            indexLegacy.frameData.timestamp = now;\n            indexLegacy.frameData.isProcessing = true;\n            indexLegacy.steps.update.process(indexLegacy.frameData);\n            indexLegacy.steps.preRender.process(indexLegacy.frameData);\n            indexLegacy.steps.render.process(indexLegacy.frameData);\n            indexLegacy.frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            indexLegacy.frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            indexLegacy.frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = indexLegacy.createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    indexLegacy.hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return indexLegacy.createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                indexLegacy.translateAxis(box.x, scroll.offset.x);\n                indexLegacy.translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = indexLegacy.createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            indexLegacy.translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            indexLegacy.translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    indexLegacy.translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    indexLegacy.translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = indexLegacy.createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    indexLegacy.transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!indexLegacy.hasTransform(node.latestValues))\n                    continue;\n                indexLegacy.transformBox(withTransforms, node.latestValues);\n            }\n            if (indexLegacy.hasTransform(this.latestValues)) {\n                indexLegacy.transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = indexLegacy.createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!indexLegacy.hasTransform(node.latestValues))\n                    continue;\n                indexLegacy.hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = indexLegacy.createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (indexLegacy.hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                indexLegacy.frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = indexLegacy.frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = indexLegacy.createBox();\n                    this.relativeTargetOrigin = indexLegacy.createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = indexLegacy.createBox();\n                this.targetWithTransforms = indexLegacy.createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                indexLegacy.applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = indexLegacy.createBox();\n                    this.relativeTargetOrigin = indexLegacy.createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                indexLegacy.hasScale(this.parent.latestValues) ||\n                indexLegacy.has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === indexLegacy.frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            indexLegacy.applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = indexLegacy.createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = indexLegacy.createDelta();\n                this.projectionDeltaWithTransform = indexLegacy.createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = indexLegacy.createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = indexLegacy.createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = indexLegacy.createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                indexLegacy.cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = indexLegacy.frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = indexLegacy.animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || indexLegacy.createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            indexLegacy.transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !indexLegacy.hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in indexLegacy.scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = indexLegacy.scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = indexLegacy.createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = indexLegacy.createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = indexLegacy.createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = indexLegacy.createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = indexLegacy.mix(delta.translate, 0, p);\n    output.scale = indexLegacy.mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = indexLegacy.mix(from.min, to.min, p);\n    output.max = indexLegacy.mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : indexLegacy.noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nconst notify = (node) => !node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = () => nodes.forEach(notify);\n    return {\n        add: (node) => {\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node) => {\n            nodes.delete(node);\n            const unsubscribe = subscriptions.get(node);\n            if (unsubscribe) {\n                unsubscribe();\n                subscriptions.delete(node);\n            }\n            dirtyAll();\n        },\n        dirty: dirtyAll,\n    };\n}\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (indexLegacy.px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = indexLegacy.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = indexLegacy.complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = indexLegacy.mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = React.useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = React.useId();\n    React.useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nclass MeasureLayoutWithContext extends React__default[\"default\"].Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        indexLegacy.addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                indexLegacy.frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = React.useContext(LayoutGroupContext);\n    return (React__default[\"default\"].createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: React.useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new indexLegacy.SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new indexLegacy.HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\n/**\n * @public\n */\nconst m = createMotionProxy(createDomMotionConfig);\n\nfunction useIsMounted() {\n    const isMounted = React.useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = React.useState(0);\n    const forceRender = React.useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = React.useCallback(() => indexLegacy.frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React__namespace.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = React.useId();\n    const ref = React.useRef(null);\n    const size = React.useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    React.useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React__namespace.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React__namespace.cloneElement(children, { ref })));\n}\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = React.useId();\n    const context = React.useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    React.useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React__namespace.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React__namespace.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React__namespace.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nfunction useUnmountEffect(callback) {\n    return React.useEffect(() => () => callback(), []);\n}\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    indexLegacy.invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = React.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = React.useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = React.useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = React.useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = React.useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map((child) => (React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                allChildren.delete(key);\n                exitingChildren.delete(key);\n                // Remove this child from the present children\n                const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n                presentChildren.current.splice(removeIndex, 1);\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    presentChildren.current = filteredChildren;\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React__namespace.createElement(React__namespace.Fragment, null, exitingChildren.size\n        ? childrenToRender\n        : childrenToRender.map((child) => React.cloneElement(child))));\n};\n\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig({ children, isValidProp, ...config }) {\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */\n    config = { ...React.useContext(MotionConfigContext), ...config };\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */\n    config.isStatic = useConstant(() => config.isStatic);\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */\n    const context = React.useMemo(() => config, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);\n    return (React__namespace.createElement(MotionConfigContext.Provider, { value: context }, children));\n}\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = React.useState(!isLazyBundle(features));\n    const loadedRenderer = React.useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */\n    if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    React.useEffect(() => {\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures }) => {\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return (React__namespace.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children));\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n\n/**\n * Note: Still used by components generated by old versions of Framer\n *\n * @deprecated\n */\nconst DeprecatedLayoutGroupContext = React.createContext(null);\n\nconst shouldInheritGroup = (inherit) => inherit === true;\nconst shouldInheritId = (inherit) => shouldInheritGroup(inherit === true) || inherit === \"id\";\nconst LayoutGroup = ({ children, id, inherit = true }) => {\n    const layoutGroupContext = React.useContext(LayoutGroupContext);\n    const deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n    const [forceRender, key] = useForceUpdate();\n    const context = React.useRef(null);\n    const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n    if (context.current === null) {\n        if (shouldInheritId(inherit) && upstreamId) {\n            id = id ? upstreamId + \"-\" + id : upstreamId;\n        }\n        context.current = {\n            id,\n            group: shouldInheritGroup(inherit)\n                ? layoutGroupContext.group || nodeGroup()\n                : nodeGroup(),\n        };\n    }\n    const memoizedContext = React.useMemo(() => ({ ...context.current, forceRender }), [key]);\n    return (React__namespace.createElement(LayoutGroupContext.Provider, { value: memoizedContext }, children));\n};\n\nconst ReorderContext = React.createContext(null);\n\nfunction checkReorder(order, value, offset, velocity) {\n    if (!velocity)\n        return order;\n    const index = order.findIndex((item) => item.value === value);\n    if (index === -1)\n        return order;\n    const nextOffset = velocity > 0 ? 1 : -1;\n    const nextItem = order[index + nextOffset];\n    if (!nextItem)\n        return order;\n    const item = order[index];\n    const nextLayout = nextItem.layout;\n    const nextItemCenter = indexLegacy.mix(nextLayout.min, nextLayout.max, 0.5);\n    if ((nextOffset === 1 && item.layout.max + offset > nextItemCenter) ||\n        (nextOffset === -1 && item.layout.min + offset < nextItemCenter)) {\n        return indexLegacy.moveItem(order, index, index + nextOffset);\n    }\n    return order;\n}\n\nfunction ReorderGroup({ children, as = \"ul\", axis = \"y\", onReorder, values, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const order = [];\n    const isReordering = React.useRef(false);\n    indexLegacy.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout) => {\n            /**\n             * Ensure entries can't add themselves more than once\n             */\n            if (layout &&\n                order.findIndex((entry) => value === entry.value) === -1) {\n                order.push({ value, layout: layout[axis] });\n                order.sort(compareMin);\n            }\n        },\n        updateOrder: (id, offset, velocity) => {\n            if (isReordering.current)\n                return;\n            const newOrder = checkReorder(order, id, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder\n                    .map(getValue)\n                    .filter((value) => values.indexOf(value) !== -1));\n            }\n        },\n    };\n    React.useEffect(() => {\n        isReordering.current = false;\n    });\n    return (React__namespace.createElement(Component, { ...props, ref: externalRef, ignoreStrict: true },\n        React__namespace.createElement(ReorderContext.Provider, { value: context }, children)));\n}\nconst Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => indexLegacy.motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = React.useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = React.useState(initial);\n        React.useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => indexLegacy.frame.update(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            indexLegacy.cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    indexLegacy.collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(indexLegacy.collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    indexLegacy.collectMotionValues.current = undefined;\n    return value;\n}\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : indexLegacy.transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nfunction useDefaultMotionValue(value, defaultValue = 0) {\n    return indexLegacy.isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem({ children, style = {}, value, as = \"li\", onDrag, layout = true, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const context = React.useContext(ReorderContext);\n    const point = {\n        x: useDefaultMotionValue(style.x),\n        y: useDefaultMotionValue(style.y),\n    };\n    const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : \"unset\");\n    const measuredLayout = React.useRef(null);\n    indexLegacy.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n    const { axis, registerItem, updateOrder } = context;\n    React.useEffect(() => {\n        registerItem(value, measuredLayout.current);\n    }, [context]);\n    return (React__namespace.createElement(Component, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex }, layout: layout, onDrag: (event, gesturePoint) => {\n            const { velocity } = gesturePoint;\n            velocity[axis] &&\n                updateOrder(value, point[axis].get(), velocity[axis]);\n            onDrag && onDrag(event, gesturePoint);\n        }, onLayoutMeasure: (measured) => {\n            measuredLayout.current = measured;\n        }, ref: externalRef, ignoreStrict: true }, children));\n}\nconst Item = React.forwardRef(ReorderItem);\n\nconst Reorder = {\n    Group,\n    Item,\n};\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments, ...values) {\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */\n    const numFragments = fragments.length;\n    function buildValue() {\n        let output = ``;\n        for (let i = 0; i < numFragments; i++) {\n            output += fragments[i];\n            const value = values[i];\n            if (value) {\n                output += indexLegacy.isMotionValue(value) ? value.get() : value;\n            }\n        }\n        return output;\n    }\n    return useCombineMotionValues(values.filter(indexLegacy.isMotionValue), buildValue);\n}\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = React.useContext(MotionConfigContext);\n    const activeSpringAnimation = React.useRef(null);\n    const value = useMotionValue(indexLegacy.isMotionValue(source) ? source.get() : source);\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    React.useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            stopAnimation();\n            activeSpringAnimation.current = indexLegacy.animateValue({\n                keyframes: [value.get(), v],\n                velocity: value.getVelocity(),\n                type: \"spring\",\n                restDelta: 0.001,\n                restSpeed: 0.01,\n                ...config,\n                onUpdate: set,\n            });\n            /**\n             * If we're between frames, resync the animation to the frameloop.\n             */\n            if (!indexLegacy.frameData.isProcessing) {\n                const delta = performance.now() - indexLegacy.frameData.timestamp;\n                if (delta < 30) {\n                    activeSpringAnimation.current.time =\n                        indexLegacy.millisecondsToSeconds(delta);\n                }\n            }\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (indexLegacy.isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(parseFloat(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nfunction useMotionValueEvent(value, event, callback) {\n    /**\n     * useInsertionEffect will create subscriptions before any other\n     * effects will run. Effects run upwards through the tree so it\n     * can be that binding a useLayoutEffect higher up the tree can\n     * miss changes from lower down the tree.\n     */\n    React.useInsertionEffect(() => value.on(event, callback), [value, event, callback]);\n}\n\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */\nfunction useVelocity(value) {\n    const velocity = useMotionValue(value.getVelocity());\n    useMotionValueEvent(value, \"velocityChange\", (newVelocity) => {\n        velocity.set(newVelocity);\n    });\n    return velocity;\n}\n\nfunction refWarning(name, ref) {\n    indexLegacy.warning(Boolean(!ref || ref.current), `You have defined a ${name} options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its \\`layoutEffect: false\\` option.`);\n}\nconst createScrollMotionValues = () => ({\n    scrollX: indexLegacy.motionValue(0),\n    scrollY: indexLegacy.motionValue(0),\n    scrollXProgress: indexLegacy.motionValue(0),\n    scrollYProgress: indexLegacy.motionValue(0),\n});\nfunction useScroll({ container, target, layoutEffect = true, ...options } = {}) {\n    const values = useConstant(createScrollMotionValues);\n    const useLifecycleEffect = layoutEffect\n        ? useIsomorphicLayoutEffect\n        : React.useEffect;\n    useLifecycleEffect(() => {\n        refWarning(\"target\", target);\n        refWarning(\"container\", container);\n        return indexLegacy.scrollInfo(({ x, y }) => {\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, {\n            ...options,\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined,\n        });\n    }, [container, target, JSON.stringify(options.offset)]);\n    return values;\n}\n\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */\nfunction useElementScroll(ref) {\n    if (process.env.NODE_ENV === \"development\") {\n        indexLegacy.warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n    }\n    return useScroll({ container: ref });\n}\n\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */\nfunction useViewportScroll() {\n    if (process.env.NODE_ENV !== \"production\") {\n        indexLegacy.warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n    }\n    return useScroll();\n}\n\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = React.useRef(0);\n    const { isStatic } = React.useContext(MotionConfigContext);\n    React.useEffect(() => {\n        if (isStatic)\n            return;\n        const provideTimeSinceStart = ({ timestamp, delta }) => {\n            if (!initialTimestamp.current)\n                initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        indexLegacy.frame.update(provideTimeSinceStart, true);\n        return () => indexLegacy.cancelFrame(provideTimeSinceStart);\n    }, [callback]);\n}\n\nfunction useTime() {\n    const time = useMotionValue(0);\n    useAnimationFrame((t) => time.set(t));\n    return time;\n}\n\nclass WillChangeMotionValue extends indexLegacy.MotionValue {\n    constructor() {\n        super(...arguments);\n        this.members = [];\n        this.transforms = new Set();\n    }\n    add(name) {\n        let memberName;\n        if (indexLegacy.transformProps.has(name)) {\n            this.transforms.add(name);\n            memberName = \"transform\";\n        }\n        else if (!name.startsWith(\"origin\") &&\n            !indexLegacy.isCSSVariableName(name) &&\n            name !== \"willChange\") {\n            memberName = indexLegacy.camelToDash(name);\n        }\n        if (memberName) {\n            indexLegacy.addUniqueItem(this.members, memberName);\n            this.update();\n        }\n    }\n    remove(name) {\n        if (indexLegacy.transformProps.has(name)) {\n            this.transforms.delete(name);\n            if (!this.transforms.size) {\n                indexLegacy.removeItem(this.members, \"transform\");\n            }\n        }\n        else {\n            indexLegacy.removeItem(this.members, indexLegacy.camelToDash(name));\n        }\n        this.update();\n    }\n    update() {\n        this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n    }\n}\nfunction useWillChange() {\n    return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !indexLegacy.hasReducedMotionListener.current && indexLegacy.initPrefersReducedMotion();\n    const [shouldReduceMotion] = React.useState(indexLegacy.prefersReducedMotion.current);\n    if (process.env.NODE_ENV !== \"production\") {\n        indexLegacy.warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = React.useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            indexLegacy.invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            indexLegacy.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                indexLegacy.setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nfunction useAnimate() {\n    const scope = useConstant(() => ({\n        current: null,\n        animations: [],\n    }));\n    const animate = useConstant(() => indexLegacy.createScopedAnimate(scope));\n    useUnmountEffect(() => {\n        scope.animations.forEach((animation) => animation.stop());\n    });\n    return [scope, animate];\n}\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle(...items) {\n    const index = React.useRef(0);\n    const [item, setItem] = React.useState(items[index.current]);\n    const runCycle = React.useCallback((next) => {\n        index.current =\n            typeof next !== \"number\"\n                ? indexLegacy.wrap(0, items.length, index.current + 1)\n                : next;\n        setItem(items[index.current]);\n    }, \n    // The array will change on each call, but by putting items.length at\n    // the front of this array, we guarantee the dependency comparison will match up\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [items.length, ...items]);\n    return [item, runCycle];\n}\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = React.useState(false);\n    React.useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount,\n        };\n        return indexLegacy.inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once]);\n    return isInView;\n}\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nclass DragControls {\n    constructor() {\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */\n    subscribe(controls) {\n        this.componentControls.add(controls);\n        return () => this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n    start(event, options) {\n        this.componentControls.forEach((controls) => {\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n}\nconst createDragControls = () => new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n    return useConstant(createDragControls);\n}\n\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    React.useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\n/**\n * Checks if a component is a `motion` component.\n */\nfunction isMotionComponent(component) {\n    return (component !== null &&\n        typeof component === \"object\" &&\n        motionComponentSymbol in component);\n}\n\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */\nfunction unwrapMotionComponent(component) {\n    if (isMotionComponent(component)) {\n        return component[motionComponentSymbol];\n    }\n    return undefined;\n}\n\nfunction useInstantLayoutTransition() {\n    return startTransition;\n}\nfunction startTransition(callback) {\n    if (!rootProjectionNode.current)\n        return;\n    rootProjectionNode.current.isUpdating = false;\n    rootProjectionNode.current.blockUpdate();\n    callback && callback();\n}\n\nfunction useInstantTransition() {\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    const unlockOnFrameRef = React.useRef();\n    React.useEffect(() => {\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */\n        indexLegacy.frame.postRender(() => indexLegacy.frame.postRender(() => {\n            /**\n             * If the callback has been called again after the effect\n             * triggered this 2 frame delay, don't unblock animations. This\n             * prevents the previous effect from unblocking the current\n             * instant transition too soon. This becomes more likely when\n             * used in conjunction with React.startTransition().\n             */\n            if (forcedRenderCount !== unlockOnFrameRef.current)\n                return;\n            indexLegacy.instantAnimationState.current = false;\n        }));\n    }, [forcedRenderCount]);\n    return (callback) => {\n        startInstantLayoutTransition(() => {\n            indexLegacy.instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n            unlockOnFrameRef.current = forcedRenderCount + 1;\n        });\n    };\n}\n\nfunction useResetProjection() {\n    const reset = React__namespace.useCallback(() => {\n        const root = rootProjectionNode.current;\n        if (!root)\n            return;\n        root.resetTree();\n    }, []);\n    return reset;\n}\n\nconst appearStoreId = (id, value) => `${id}: ${value}`;\n\nconst appearAnimationStore = new Map();\n\nfunction handoffOptimizedAppearAnimation(id, name, \n/**\n * Legacy argument. This function is inlined apart from framer-motion so\n * will co-ordinate with Shuang with how best to remove this.\n */\n_value, \n/**\n * This function is loaded via window by startOptimisedAnimation.\n * By accepting `sync` as an argument, rather than using it via\n * import, it can be kept out of the first-load Framer bundle,\n * while also allowing this function to not be included in\n * Framer Motion bundles where it's not needed.\n */\nframe) {\n    const storeId = appearStoreId(id, indexLegacy.transformProps.has(name) ? \"transform\" : name);\n    const appearAnimation = appearAnimationStore.get(storeId);\n    if (!appearAnimation)\n        return 0;\n    const { animation, startTime } = appearAnimation;\n    const cancelOptimisedAnimation = () => {\n        appearAnimationStore.delete(storeId);\n        /**\n         * Animation.cancel() throws so it needs to be wrapped in a try/catch\n         */\n        try {\n            animation.cancel();\n        }\n        catch (e) { }\n    };\n    if (startTime !== null) {\n        /**\n         * We allow the animation to persist until the next frame:\n         *   1. So it continues to play until Framer Motion is ready to render\n         *      (avoiding a potential flash of the element's original state)\n         *   2. As all independent transforms share a single transform animation, stopping\n         *      it synchronously would prevent subsequent transforms from handing off.\n         */\n        frame.render(cancelOptimisedAnimation);\n        /**\n         * We use main thread timings vs those returned by Animation.currentTime as it\n         * can be the case, particularly in Firefox, that currentTime doesn't return\n         * an updated value for several frames, even as the animation plays smoothly via\n         * the GPU.\n         */\n        return performance.now() - startTime || 0;\n    }\n    else {\n        cancelOptimisedAnimation();\n        return 0;\n    }\n}\n\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n    const id = element.dataset[indexLegacy.optimizedAppearDataId];\n    if (!id)\n        return;\n    window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n    const storeId = appearStoreId(id, name);\n    /**\n     * Use a dummy animation to detect when Chrome is ready to start\n     * painting the page and hold off from triggering the real animation\n     * until then.\n     *\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n     */\n    const readyAnimation = indexLegacy.animateStyle(element, name, [keyframes[0], keyframes[0]], \n    /**\n     * 10 secs is basically just a super-safe duration to give Chrome\n     * long enough to get the animation ready.\n     */\n    { duration: 10000, ease: \"linear\" });\n    appearAnimationStore.set(storeId, {\n        animation: readyAnimation,\n        startTime: null,\n    });\n    const startAnimation = () => {\n        readyAnimation.cancel();\n        const appearAnimation = indexLegacy.animateStyle(element, name, keyframes, options);\n        if (document.timeline) {\n            appearAnimation.startTime = document.timeline.currentTime;\n        }\n        appearAnimationStore.set(storeId, {\n            animation: appearAnimation,\n            startTime: performance.now(),\n        });\n        if (onReady)\n            onReady(appearAnimation);\n    };\n    if (readyAnimation.ready) {\n        readyAnimation.ready.then(startAnimation).catch(indexLegacy.noop);\n    }\n    else {\n        startAnimation();\n    }\n}\n\nconst createObject = () => ({});\nclass StateVisualElement extends indexLegacy.VisualElement {\n    build() { }\n    measureInstanceViewportBox() {\n        return indexLegacy.createBox();\n    }\n    resetTransform() { }\n    restoreTransform() { }\n    removeValueFromRenderState() { }\n    renderInstance() { }\n    scrapeMotionValuesFromProps() {\n        return createObject();\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    readValueFromInstance(_state, key, options) {\n        return options.initialState[key] || 0;\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }) {\n        const origin = indexLegacy.getOrigin(target, transition || {}, this);\n        indexLegacy.checkTargetForNewValues(this, target, origin);\n        return { transition, transitionEnd, ...target };\n    }\n}\nconst useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject,\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\nfunction useAnimatedState(initialState) {\n    const [animationState, setAnimationState] = React.useState(initialState);\n    const visualState = useVisualState({}, false);\n    const element = useConstant(() => {\n        return new StateVisualElement({ props: {}, visualState, presenceContext: null }, { initialState });\n    });\n    React.useEffect(() => {\n        element.mount({});\n        return () => element.unmount();\n    }, [element]);\n    React.useEffect(() => {\n        element.update({\n            onUpdate: (v) => {\n                setAnimationState({ ...v });\n            },\n        }, null);\n    }, [setAnimationState, element]);\n    const startAnimation = useConstant(() => (animationDefinition) => {\n        return animateVisualElement(element, animationDefinition);\n    });\n    return [animationState, startAnimation];\n}\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale) => scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const { visualElement } = React.useContext(MotionContext);\n    indexLegacy.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    indexLegacy.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    }\n    else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return { scaleX, scaleY };\n}\n\nlet id = 0;\nconst AnimateSharedLayout = ({ children }) => {\n    React__namespace.useEffect(() => {\n        indexLegacy.invariant(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n    }, []);\n    return (React__namespace.createElement(LayoutGroup, { id: useConstant(() => `asl-${id++}`) }, children));\n};\n\nexports.MotionValue = indexLegacy.MotionValue;\nexports.VisualElement = indexLegacy.VisualElement;\nexports.addScaleCorrector = indexLegacy.addScaleCorrector;\nexports.animate = indexLegacy.animate;\nexports.animateValue = indexLegacy.animateValue;\nexports.anticipate = indexLegacy.anticipate;\nexports.backIn = indexLegacy.backIn;\nexports.backInOut = indexLegacy.backInOut;\nexports.backOut = indexLegacy.backOut;\nexports.buildTransform = indexLegacy.buildTransform;\nexports.cancelFrame = indexLegacy.cancelFrame;\nexports.cancelSync = indexLegacy.cancelSync;\nexports.checkTargetForNewValues = indexLegacy.checkTargetForNewValues;\nexports.circIn = indexLegacy.circIn;\nexports.circInOut = indexLegacy.circInOut;\nexports.circOut = indexLegacy.circOut;\nexports.clamp = indexLegacy.clamp;\nexports.color = indexLegacy.color;\nexports.complex = indexLegacy.complex;\nexports.createBox = indexLegacy.createBox;\nexports.createScopedAnimate = indexLegacy.createScopedAnimate;\nexports.cubicBezier = indexLegacy.cubicBezier;\nexports.delay = indexLegacy.delay;\nexports.distance = indexLegacy.distance;\nexports.distance2D = indexLegacy.distance2D;\nexports.easeIn = indexLegacy.easeIn;\nexports.easeInOut = indexLegacy.easeInOut;\nexports.easeOut = indexLegacy.easeOut;\nexports.frame = indexLegacy.frame;\nexports.frameData = indexLegacy.frameData;\nexports.inView = indexLegacy.inView;\nexports.interpolate = indexLegacy.interpolate;\nObject.defineProperty(exports, 'invariant', {\n    enumerable: true,\n    get: function () { return indexLegacy.invariant; }\n});\nexports.isBrowser = indexLegacy.isBrowser;\nexports.isMotionValue = indexLegacy.isMotionValue;\nexports.mirrorEasing = indexLegacy.mirrorEasing;\nexports.mix = indexLegacy.mix;\nexports.motionValue = indexLegacy.motionValue;\nexports.optimizedAppearDataAttribute = indexLegacy.optimizedAppearDataAttribute;\nexports.pipe = indexLegacy.pipe;\nexports.progress = indexLegacy.progress;\nexports.px = indexLegacy.px;\nexports.reverseEasing = indexLegacy.reverseEasing;\nexports.scroll = indexLegacy.scroll;\nexports.scrollInfo = indexLegacy.scrollInfo;\nexports.spring = indexLegacy.spring;\nexports.stagger = indexLegacy.stagger;\nexports.steps = indexLegacy.steps;\nexports.sync = indexLegacy.sync;\nexports.transform = indexLegacy.transform;\nexports.visualElementStore = indexLegacy.visualElementStore;\nObject.defineProperty(exports, 'warning', {\n    enumerable: true,\n    get: function () { return indexLegacy.warning; }\n});\nexports.wrap = indexLegacy.wrap;\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.addPointerEvent = addPointerEvent;\nexports.addPointerInfo = addPointerInfo;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.calcLength = calcLength;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isDragActive = isDragActive;\nexports.isMotionComponent = isMotionComponent;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.motion = motion;\nexports.resolveMotionValue = resolveMotionValue;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimate = useAnimate;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.useMotionValueEvent = useMotionValueEvent;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useWillChange = useWillChange;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}