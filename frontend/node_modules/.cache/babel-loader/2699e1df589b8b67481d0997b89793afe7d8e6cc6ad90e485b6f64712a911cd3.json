{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  useDisclosure: () => useDisclosure\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_react_use_callback_ref = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_react = require(\"react\");\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = (0, import_react_use_callback_ref.useCallbackRef)(onOpenProp);\n  const handleClose = (0, import_react_use_callback_ref.useCallbackRef)(onCloseProp);\n  const [isOpenState, setIsOpen] = (0, import_react.useState)(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = (0, import_react.useId)();\n  const id = idProp != null ? idProp : `disclosure-${uid}`;\n  const onClose = (0, import_react.useCallback)(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = (0, import_react.useCallback)(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = (0, import_react.useCallback)(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps(props2 = {}) {\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps(props2 = {}) {\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  useDisclosure\n});","map":{"version":3,"names":["src_exports","__export","useDisclosure","module","exports","__toCommonJS","import_react_use_callback_ref","require","import_react","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","handleOpen","useCallbackRef","handleClose","isOpenState","setIsOpen","useState","defaultIsOpen","isControlled","uid","useId","useCallback","onToggle","getButtonProps","props2","onClick","event","_a","call","getDisclosureProps","hidden"],"sources":["W:\\xampp\\htdocs\\movie-website\\frontend\\node_modules\\@chakra-ui\\react-use-disclosure\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,aAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;AAAA,IAAAM,6BAAA,GAA+BC,OAAA;AAC/B,IAAAC,YAAA,GAAoDD,OAAA;AAkB7C,SAASL,cAAcO,KAAA,GAA4B,CAAC,GAAG;EAC5D,MAAM;IACJC,OAAA,EAASC,WAAA;IACTC,MAAA,EAAQC,UAAA;IACRC,MAAA,EAAQC,UAAA;IACRC,EAAA,EAAIC;EACN,IAAIR,KAAA;EAEJ,MAAMS,UAAA,OAAaZ,6BAAA,CAAAa,cAAA,EAAeN,UAAU;EAC5C,MAAMO,WAAA,OAAcd,6BAAA,CAAAa,cAAA,EAAeR,WAAW;EAE9C,MAAM,CAACU,WAAA,EAAaC,SAAS,QAAId,YAAA,CAAAe,QAAA,EAASd,KAAA,CAAMe,aAAA,IAAiB,KAAK;EAEtE,MAAMV,MAAA,GAASC,UAAA,KAAe,SAAYA,UAAA,GAAaM,WAAA;EAEvD,MAAMI,YAAA,GAAeV,UAAA,KAAe;EAEpC,MAAMW,GAAA,OAAMlB,YAAA,CAAAmB,KAAA,EAAM;EAClB,MAAMX,EAAA,GAAKC,MAAA,WAAAA,MAAA,GAAU,cAAcS,GAAA;EAEnC,MAAMhB,OAAA,OAAUF,YAAA,CAAAoB,WAAA,EAAY,MAAM;IAChC,IAAI,CAACH,YAAA,EAAc;MACjBH,SAAA,CAAU,KAAK;IACjB;IACAF,WAAA,oBAAAA,WAAA;EACF,GAAG,CAACK,YAAA,EAAcL,WAAW,CAAC;EAE9B,MAAMR,MAAA,OAASJ,YAAA,CAAAoB,WAAA,EAAY,MAAM;IAC/B,IAAI,CAACH,YAAA,EAAc;MACjBH,SAAA,CAAU,IAAI;IAChB;IACAJ,UAAA,oBAAAA,UAAA;EACF,GAAG,CAACO,YAAA,EAAcP,UAAU,CAAC;EAE7B,MAAMW,QAAA,OAAWrB,YAAA,CAAAoB,WAAA,EAAY,MAAM;IACjC,IAAId,MAAA,EAAQ;MACVJ,OAAA,CAAQ;IACV,OAAO;MACLE,MAAA,CAAO;IACT;EACF,GAAG,CAACE,MAAA,EAAQF,MAAA,EAAQF,OAAO,CAAC;EAE5B,SAASoB,eAAeC,MAAA,GAAmB,CAAC,GAAc;IACxD,OAAO;MACL,GAAGA,MAAA;MACH,iBAAiBjB,MAAA;MACjB,iBAAiBE,EAAA;MACjBgB,QAAQC,KAAA,EAAO;QAlErB,IAAAC,EAAA;QAmEQ,CAAAA,EAAA,GAAAH,MAAA,CAAMC,OAAA,KAAN,gBAAAE,EAAA,CAAAC,IAAA,CAAAJ,MAAA,EAAgBE,KAAA;QAChBJ,QAAA,CAAS;MACX;IACF;EACF;EAEA,SAASO,mBAAmBL,MAAA,GAAmB,CAAC,GAAc;IAC5D,OAAO;MACL,GAAGA,MAAA;MACHM,MAAA,EAAQ,CAACvB,MAAA;MACTE;IACF;EACF;EAEA,OAAO;IACLF,MAAA;IACAF,MAAA;IACAF,OAAA;IACAmB,QAAA;IACAJ,YAAA;IACAK,cAAA;IACAM;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}